{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/ai-instance.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  promptDir: './prompts',\n  plugins: [\n    googleAI({\n      apiKey: process.env.GOOGLE_GENAI_API_KEY,\n    }),\n  ],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,WAAW;IACX,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;YACP,QAAQ,QAAQ,GAAG,CAAC,oBAAoB;QAC1C;KACD;IACD,OAAO;AACT","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/services/stock-data.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Service functions for retrieving stock data, news, and company performance.\n * Uses yahoo-finance2 for stock/performance and direct fetch for NewsAPI.org news.\n */\nimport yahooFinance from 'yahoo-finance2';\nimport type { Quote } from 'yahoo-finance2/dist/esm/src/modules/quote';\nimport type { QuoteSummaryResult } from 'yahoo-finance2/dist/esm/src/modules/quoteSummary';\n// NewsAPI library removed, will use fetch directly\n\n// --- Types ---\n\n/**\n * Represents real-time stock data.\n */\nexport interface StockData {\n  /**\n   * The stock symbol (e.g., AAPL).\n   */\n  symbol: string;\n  /**\n   * The current price of the stock.\n   */\n  price: number;\n  /**\n   * The daily high price of the stock.\n   */\n  dailyHigh: number;\n  /**\n   * The daily low price of the stock.\n   */\n  dailyLow: number;\n  /**\n   * The company name.\n   */\n  companyName: string;\n}\n\n/**\n * Represents a news article headline.\n */\nexport interface NewsHeadline {\n    /**\n     * The headline text.\n     */\n    title: string;\n    /**\n     * URL to the full article.\n     */\n    url: string;\n    /**\n     * Source of the news article.\n     */\n    source: string;\n    /**\n     * Publication date/time (ISO string).\n     */\n    publishedAt: string;\n}\n\n\n/**\n * Represents company performance metrics.\n */\nexport interface CompanyPerformance {\n  /**\n   * The stock symbol (e.g., AAPL).\n   */\n  symbol: string;\n  /**\n   * The latest quarterly revenue (Note: Often requires premium API or may be unavailable).\n   * This field might be null or undefined.\n   */\n  revenue?: number | null;\n  /**\n   * The latest quarterly earnings per share (Trailing Twelve Months).\n   */\n  eps: number;\n  /**\n   * The price-to-earnings ratio (Trailing Twelve Months).\n   */\n  peRatio: number;\n}\n\n// --- NewsAPI Configuration ---\nconst NEWSAPI_KEY = process.env.NEWSAPI_KEY;\nconst NEWSAPI_ENDPOINT = 'https://newsapi.org/v2/everything';\n\nif (!NEWSAPI_KEY) {\n    console.warn(\"NEWSAPI_KEY environment variable not set. News fetching will be disabled.\");\n    // Set a flag to indicate the API key is missing, used in NewsDisplay component\n    process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'true';\n} else {\n     process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'false';\n}\n\n\n// --- Stock Data (Yahoo Finance) ---\n\n/**\n * Asynchronously retrieves real-time stock data for a given stock symbol using Yahoo Finance.\n * @param symbol The stock symbol to retrieve data for.\n * @returns A promise that resolves to a StockData object containing real-time stock information.\n * @throws Will throw an error if the API call fails or the symbol is invalid.\n */\nexport async function getStockData(symbol: string): Promise<StockData> {\n    try {\n        const quote = await yahooFinance.quote(symbol);\n\n        if (!quote || !quote.regularMarketPrice) {\n            throw new Error(`No valid quote data found for symbol: ${symbol}`);\n        }\n\n        const data: StockData = {\n            symbol: quote.symbol,\n            price: quote.regularMarketPrice,\n            dailyHigh: quote.regularMarketDayHigh ?? quote.regularMarketPrice, // Fallback to current price if high is missing\n            dailyLow: quote.regularMarketDayLow ?? quote.regularMarketPrice,   // Fallback to current price if low is missing\n            companyName: quote.longName || quote.shortName || `${symbol} Name N/A`, // Use longName, fallback to shortName or symbol\n        };\n        return data;\n    } catch (error: any) {\n        console.error(`Error fetching stock data for ${symbol} from Yahoo Finance:`, error.message);\n        // Re-throw a more specific error or handle as needed\n        if (error.message.includes('404 Not Found')) {\n             throw new Error(`Invalid stock symbol or data unavailable: ${symbol}`);\n        }\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n/**\n * Asynchronously retrieves stock data for multiple symbols using Yahoo Finance.\n * @param symbols An array of stock symbols.\n * @returns A promise that resolves to an array of StockData objects. Symbols with errors will be excluded.\n */\nexport async function getMultipleStockData(symbols: string[]): Promise<StockData[]> {\n  if (!symbols || symbols.length === 0) {\n    return [];\n  }\n  try {\n    const quotes = await yahooFinance.quote(symbols);\n    const results: StockData[] = [];\n\n    // Check if quotes is an array (multiple symbols) or an object (single symbol)\n    const quoteArray = Array.isArray(quotes) ? quotes : [quotes];\n\n    for (const quote of quoteArray) {\n        if (quote && quote.regularMarketPrice && quote.symbol) {\n             results.push({\n                symbol: quote.symbol,\n                price: quote.regularMarketPrice,\n                dailyHigh: quote.regularMarketDayHigh ?? quote.regularMarketPrice,\n                dailyLow: quote.regularMarketDayLow ?? quote.regularMarketPrice,\n                companyName: quote.longName || quote.shortName || `${quote.symbol} Name N/A`,\n            });\n        } else {\n             console.warn(`Skipping invalid quote data received for one of the symbols.`);\n        }\n    }\n    return results;\n  } catch (error: any) {\n    console.error(`Error fetching multiple stock data from Yahoo Finance:`, error.message);\n    // Return empty array or partial results if desired, for now return empty on error\n    return [];\n     // Or re-throw: throw new Error(`Failed to fetch multiple stock data. Reason: ${error.message}`);\n  }\n}\n\n\n// --- Company Performance (Yahoo Finance) ---\n\n/**\n * Asynchronously retrieves company performance metrics for a given stock symbol using Yahoo Finance.\n * Note: Revenue data might not be consistently available via free APIs.\n * @param symbol The stock symbol to retrieve metrics for.\n * @returns A promise that resolves to a CompanyPerformance object.\n * @throws Will throw an error if the API call fails or required data is missing.\n */\nexport async function getCompanyPerformance(symbol: string): Promise<CompanyPerformance> {\n    try {\n        // Fetch summary data which includes defaultKeyStatistics\n        const summary = await yahooFinance.quoteSummary(symbol, {\n             modules: [\"defaultKeyStatistics\", \"summaryDetail\", \"financialData\"] // Include necessary modules\n        });\n\n        if (!summary) {\n            throw new Error(`No summary data found for symbol: ${symbol}`);\n        }\n\n        const defaultKeyStatistics = summary.defaultKeyStatistics;\n        const summaryDetail = summary.summaryDetail;\n        const financialData = summary.financialData;\n\n        // P/E Ratio and EPS are often in summaryDetail or defaultKeyStatistics\n        const peRatio = summaryDetail?.trailingPE ?? defaultKeyStatistics?.trailingPE;\n        const eps = summaryDetail?.trailingEps ?? defaultKeyStatistics?.trailingEps;\n\n        // Revenue is typically in financialData\n        const revenue = financialData?.totalRevenue; // This might be null or undefined\n\n\n        // Validate required fields\n        if (eps === undefined || eps === null) {\n             // Allow missing EPS but log warning\n             console.warn(`EPS data is missing for symbol: ${symbol}.`);\n             // Consider setting a default or special value like NaN if needed downstream\n             // eps = NaN; // Or keep it as is (null/undefined) depending on consumer logic\n        }\n         if (peRatio === undefined || peRatio === null) {\n            // Allow missing P/E for some cases (e.g., negative earnings) but maybe provide a default or indicator\n            console.warn(`P/E ratio is missing for symbol: ${symbol}. Might be due to negative earnings.`);\n             // Consider setting a default or special value like NaN if needed downstream\n             // peRatio = NaN; // Or keep it as is (null/undefined) depending on consumer logic\n         }\n\n\n        const performance: CompanyPerformance = {\n            symbol: symbol, // Use the input symbol as it's not always returned in response parts\n            revenue: revenue, // Can be null/undefined\n            // Use NaN if EPS is missing/null/undefined for numerical consistency\n            eps: typeof eps === 'number' ? eps : NaN,\n             // Use NaN if PE is missing/null/undefined for numerical consistency\n            peRatio: typeof peRatio === 'number' ? peRatio : NaN,\n        };\n\n        return performance;\n    } catch (error: any) {\n        console.error(`Error fetching company performance for ${symbol} from Yahoo Finance:`, error.message);\n        if (error.message.includes('404 Not Found')) {\n             throw new Error(`Invalid stock symbol or data unavailable for performance: ${symbol}`);\n        }\n        throw new Error(`Failed to fetch company performance for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n\n// --- News Headlines (NewsAPI.org via Fetch) ---\n\n/**\n * Asynchronously retrieves recent news headlines related to a given stock symbol using NewsAPI.org via fetch.\n * Uses the company name associated with the symbol for better search results.\n * @param symbol The stock symbol to retrieve news for.\n * @returns A promise that resolves to an array of NewsHeadline objects.\n * @throws Will throw an error if the NewsAPI key is missing, the API call fails, or the symbol is invalid.\n */\nexport async function getNewsHeadlines(symbol: string): Promise<NewsHeadline[]> {\n    if (!NEWSAPI_KEY) {\n        console.error(\"NewsAPI key is missing. Cannot fetch news.\");\n        // Set flag indicating the service is disabled due to missing key\n        process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'true';\n        // Return empty or throw error based on desired handling\n        // throw new Error('NewsAPI key is missing.'); // Option: throw error\n        return []; // Option: return empty list\n    }\n     // Ensure flag is false if key exists\n     process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'false';\n\n    try {\n        // 1. Get company name from stock data to improve news search relevance\n        let companyName = symbol; // Default to symbol if name fetch fails\n        let stockInfo: StockData | null = null;\n        try {\n            stockInfo = await getStockData(symbol); // Reuse existing function\n            // Use the first word of the company name or the full name if short\n            companyName = stockInfo.companyName.includes(' ') ? stockInfo.companyName.split(\" \")[0] : stockInfo.companyName;\n        } catch (nameError: any) {\n            console.warn(`Could not fetch company name for news search (${symbol}): ${nameError.message}. Using symbol instead.`);\n        }\n\n        // 2. Construct NewsAPI query parameters\n        const query = encodeURIComponent(`\"${companyName}\" OR ${symbol}`); // Search for exact company name or symbol\n        const url = `${NEWSAPI_ENDPOINT}?q=${query}&language=en&sortBy=relevancy&pageSize=10&apiKey=${NEWSAPI_KEY}`;\n\n        console.log(`Fetching news from NewsAPI URL: ${NEWSAPI_ENDPOINT}?q=${query}&...`);\n\n        // 3. Make the request using fetch\n        const response = await fetch(url, {\n            method: 'GET',\n             // Add cache control if needed, e.g., revalidate every 15 minutes\n            next: { revalidate: 900 }\n            // No headers needed for basic key auth with NewsAPI via query param\n        });\n\n        if (!response.ok) {\n            // Attempt to parse error response from NewsAPI\n            let errorBody = null;\n            try {\n                errorBody = await response.json();\n            } catch (e) { /* Ignore parsing error */ }\n\n            const statusText = errorBody?.message || response.statusText;\n            const errorCode = errorBody?.code;\n\n             // Specific error handling based on NewsAPI codes\n             if (errorCode === 'apiKeyInvalid' || errorCode === 'apiKeyMissing') {\n                 throw new Error('Invalid or missing NewsAPI key.');\n             }\n             if (errorCode === 'rateLimited') {\n                 throw new Error('NewsAPI rate limit exceeded.');\n             }\n\n             throw new Error(`NewsAPI request failed: ${response.status} ${statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.articles || data.articles.length === 0) {\n            console.warn(`No news headlines found via NewsAPI for query: ${companyName} OR ${symbol}`);\n            return [];\n        }\n\n        // 4. Map NewsAPI articles to our NewsHeadline interface\n        const headlines: NewsHeadline[] = data.articles.map((article: any) => ({ // Use 'any' for external API structure flexibility\n            title: article.title || 'No Title',\n            url: article.url || '#',\n            source: article.source?.name || 'Unknown Source',\n            publishedAt: article.publishedAt || new Date().toISOString(), // Fallback to current time if missing\n        }));\n\n         // Optional: Sort by date descending if needed (sortBy=relevancy might not guarantee chronological order)\n         // headlines.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());\n\n        return headlines;\n\n    } catch (error: any) {\n        console.error(`Error fetching news headlines for ${symbol} via NewsAPI fetch:`, error.message);\n        // Re-throw specific or generic error\n        // Let specific errors (like invalid key, rate limit) bubble up\n        if (error.message.includes('Invalid or missing NewsAPI key') || error.message.includes('NewsAPI rate limit exceeded')) {\n            throw error; // Re-throw specific known errors\n        }\n        // Throw a generic error for other fetch/network issues\n        throw new Error(`Failed to fetch news headlines for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 474, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/agent-trader.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent that monitors stock market conditions and makes trades based on a user's investment persona and strategy.\n *\n * - runAgentTrader - Public function to invoke the agent trader flow.\n * - AgentTraderInput - The input type for the agentTrader function.\n * - AgentTraderOutput - The return type for the agentTrader function.\n * - agentTraderFlow - The Genkit flow definition.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\nimport type { StockData, CompanyPerformance, NewsHeadline } from '@/services/stock-data';\n// Import the actual data fetching functions\nimport { getStockData, getCompanyPerformance, getNewsHeadlines } from '@/services/stock-data'; // Ensure getNewsHeadlines now uses NewsAPI\nimport type { GenerateInvestmentPersonaOutput } from '@/ai/flows/generate-investment-persona'; // Import persona type\nimport type { PortfolioItem } from '@/types';\n\n// Define Zod schema for the persona within the input\nconst InvestmentPersonaSchema = z.object({\n  riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n  investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n  timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n  investmentAmount: z.string().describe('The users investment amount.'),\n  investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n});\n\nconst PortfolioItemSchema = z.object({\n  symbol: z.string(),\n  companyName: z.string(),\n  quantity: z.number(),\n  purchasePrice: z.number(),\n  currentPrice: z.number(),\n});\n// Extended schema for prompt input with formatted strings\nconst PortfolioItemPromptSchema = PortfolioItemSchema.extend({\n    purchasePriceFormatted: z.string(),\n    currentPriceFormatted: z.string(),\n});\n\n\nconst AgentTraderInputSchema = z.object({\n  userPersona: InvestmentPersonaSchema.describe(\"The user's investment persona.\"),\n  currentPortfolio: z.array(PortfolioItemSchema).describe(\"The user's current stock portfolio.\"),\n  virtualBalance: z.number().describe(\"The user's current virtual cash balance.\"),\n  monitoredSymbols: z.array(z.string()).describe(\"A list of stock symbols the agent should actively monitor.\"),\n});\nexport type AgentTraderInput = z.infer<typeof AgentTraderInputSchema>;\n\n// Schema for the data actually passed to the prompt, including formatted currency and symbols\nconst AgentTraderPromptInputSchema = AgentTraderInputSchema.extend({\n    currentPortfolio: z.array(PortfolioItemPromptSchema), // Use extended portfolio schema\n    virtualBalanceFormatted: z.string(), // Add formatted balance\n    monitoredSymbolsFormatted: z.string().describe(\"Comma-separated list of monitored stock symbols.\"), // Add formatted symbols string\n});\n\n// Define the structure for a trade decision\nconst TradeDecisionSchema = z.object({\n    action: z.enum(['buy', 'sell', 'hold']).describe(\"The recommended action: buy, sell, or hold.\"),\n    symbol: z.string().describe(\"The stock symbol for the action.\"),\n    quantity: z.number().optional().describe(\"The number of shares to trade (required for buy/sell).\"),\n    reasoning: z.string().describe(\"The justification for the trade decision based on the persona, strategy, market data, and recent news.\"), // Updated description\n    confidenceScore: z.number().min(0).max(1).step(0.01).optional().describe(\"A score (0.00-1.00) indicating the agent's confidence in this decision.\"), // Changed to 0-1 scale\n});\n\n\nconst AgentTraderOutputSchema = z.object({\n  tradeDecisions: z.array(TradeDecisionSchema).describe(\"A list of trade decisions made by the agent for the monitored symbols.\"),\n  overallStrategyAdjustment: z.string().optional().describe(\"Any suggested adjustments to the overall investment strategy based on current conditions and news.\"), // Updated description\n});\nexport type AgentTraderOutput = z.infer<typeof AgentTraderOutputSchema>;\n\n// --- Tools for the Agent ---\n\n// Tool to get current stock data - Uses REAL API call (Yahoo Finance)\nconst getCurrentStockDataTool = ai.defineTool({\n  name: 'getCurrentStockData',\n  description: 'Retrieves the latest price, daily high, daily low, and company name for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Use the actual StockData interface structure\n  outputSchema: z.object({\n    symbol: z.string(),\n    price: z.number(),\n    dailyHigh: z.number(),\n    dailyLow: z.number(),\n    companyName: z.string(),\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching stock data for ${symbol} from Yahoo Finance...`);\n        const data = await getStockData(symbol); // Call the real service function\n        console.log(`Agent Tool: Stock data received for ${symbol}:`, data);\n        return data;\n    } catch (error: any) {\n        console.error(`Agent Tool Error: Error fetching stock data for ${symbol}:`, error.message);\n        // Provide a more informative error message to the LLM\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}. The symbol might be invalid or the service is unavailable.`);\n    }\n});\n\n// Tool to get company performance data - Uses REAL API call (Yahoo Finance)\nconst getCompanyPerformanceTool = ai.defineTool({\n  name: 'getCompanyPerformanceData',\n  description: 'Retrieves key performance metrics like revenue (if available), EPS, and P/E ratio for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Use the actual CompanyPerformance interface structure, note revenue is optional\n   outputSchema: z.object({\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(), // Mark revenue as optional and potentially null\n      eps: z.number(),\n      peRatio: z.number(), // Allow NaN for PE Ratio\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching company performance for ${symbol} from Yahoo Finance...`);\n        const data = await getCompanyPerformance(symbol); // Call the real service function\n        console.log(`Agent Tool: Company performance received for ${symbol}:`, data);\n        return data;\n    } catch (error: any) {\n        console.error(`Agent Tool Error: Error fetching company performance for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch company performance data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n// Tool to get recent news headlines - Uses REAL API call (NewsAPI.org via service)\nconst getRecentNewsTool = ai.defineTool({\n    name: 'getRecentNewsHeadlines',\n    // Updated description to mention NewsAPI.org\n    description: 'Retrieves recent news headlines for a given stock symbol from NewsAPI.org to understand market sentiment and potential impacts.',\n    inputSchema: z.object({\n      symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n    }),\n    // Use the actual NewsHeadline interface structure\n    outputSchema: z.array(z.object({\n        title: z.string(),\n        url: z.string(),\n        source: z.string(),\n        publishedAt: z.string(), // ISO date string\n    })).describe(\"An array of recent news headlines from NewsAPI.org.\"),\n}, async({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching news headlines for ${symbol} from NewsAPI.org...`);\n        // Calls the updated getNewsHeadlines function in stock-data.ts\n        const data = await getNewsHeadlines(symbol);\n        console.log(`Agent Tool: News headlines received for ${symbol}:`, data.length > 0 ? `${data.length} headlines` : 'No headlines');\n        return data;\n    } catch (error: any) {\n         console.error(`Agent Tool Error: Error fetching news headlines for ${symbol}:`, error.message);\n         // Pass specific error messages back\n         throw new Error(`Failed to fetch news headlines for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n\n// --- Agent Prompt ---\n\nconst agentTraderPrompt = ai.definePrompt({\n  name: 'agentTraderPrompt',\n  tools: [getCurrentStockDataTool, getCompanyPerformanceTool, getRecentNewsTool], // Ensure all tools are included\n  input: { schema: AgentTraderPromptInputSchema }, // Use the extended input schema with formatted strings\n  output: { schema: AgentTraderOutputSchema },\n  // Removed customize block as helpers are no longer needed in the template\n  // Updated prompt description to mention NewsAPI.org source\n  // Updated prompt to use pre-formatted currency and symbols strings\n  prompt: `You are an autonomous investment agent. Your goal is to manage a simulated stock portfolio based on the provided user persona and current market conditions, including recent news fetched from NewsAPI.org.\n\nUser Persona:\nRisk Appetite: {{{userPersona.riskAppetite}}}\nInvestment Goals: {{{userPersona.investmentGoals}}}\nTime Horizon: {{{userPersona.timeHorizon}}}\nInvestment Amount: {{{userPersona.investmentAmount}}} (Note: Use Virtual Balance for available cash)\nInvestment Style: {{{userPersona.investmentStyle}}}\n\nCurrent Portfolio:\n{{#if currentPortfolio.length}}\n{{#each currentPortfolio}}\n- {{symbol}}: {{quantity}} shares @ avg $ {{purchasePriceFormatted}} (Current: $ {{currentPriceFormatted}})\n{{/each}}\n{{else}}\n- Portfolio is empty.\n{{/if}}\nVirtual Balance: $ {{virtualBalanceFormatted}}\n\nMonitored Symbols: {{{monitoredSymbolsFormatted}}}\n\nInstructions:\n1.  For EACH monitored symbol in the list [{{{monitoredSymbolsFormatted}}}]:\n    a.  Use the 'getCurrentStockData' tool to get the latest market data (price, high, low, company name) from Yahoo Finance.\n    b.  Use the 'getCompanyPerformanceData' tool to get company performance metrics (Revenue (if available), EPS, P/E ratio) from Yahoo Finance. Note that P/E might be NaN if earnings are negative.\n    c.  Use the 'getRecentNewsHeadlines' tool to fetch recent news headlines from NewsAPI.org.\n    d.  If any tool fails for a symbol (e.g., invalid symbol, API error, rate limit), make a note of the failure in your reasoning for that symbol and proceed to the next symbol. Do not halt the entire process. Make a 'hold' decision with reasoning indicating the data fetch failure.\n2.  Analyze the fetched data (stock price, performance metrics, news headlines) in the context of the user's persona (risk, goals, style) and their current portfolio holdings. Pay close attention to how news (especially from NewsAPI.org) might impact the stock's short-term and long-term prospects. Consider the P/E ratio (even if NaN) and EPS.\n3.  Decide whether to 'buy', 'sell', or 'hold' each monitored stock.\n4.  If buying, determine a reasonable quantity based on the virtual balance (use the numerical value, not the formatted string, for calculation checks if needed, but remember the balance is $ {{virtualBalanceFormatted}}), risk profile, news sentiment, and diversification principles. Avoid overly concentrating the portfolio. A typical single stock position might be 5-15% of the total portfolio value (holdings + balance). Do not exceed available virtual balance. Factor in potential risks highlighted in the news. Ensure quantity is a positive whole number.\n5.  If selling, determine the quantity. You can sell a portion or all of the holding for that symbol. Consider if negative news warrants reducing exposure. Only sell shares currently held in the portfolio. Ensure quantity is a positive whole number and does not exceed owned shares.\n6.  For each decision ('buy', 'sell', 'hold'), provide clear, concise reasoning, linking it back to the persona, strategy, data, AND NEWS sentiment from NewsAPI.org. Assign a confidence score between 0.00 and 1.00 (e.g., 0.75).\n7.  Optionally, suggest an 'overallStrategyAdjustment' if current market conditions, news trends (from NewsAPI.org), or portfolio performance warrant a shift in approach (e.g., \"Consider shifting slightly more defensive due to widespread negative tech news from NewsAPI.org and market volatility.\").\n\nOutput Format:\nReturn a JSON object matching the AgentTraderOutput schema, containing an array of 'tradeDecisions' (one for each monitored symbol, even if data fetch failed) and optionally 'overallStrategyAdjustment'. Ensure 'quantity' is provided AND is a positive whole number for 'buy' and 'sell' actions. Ensure 'confidenceScore' is between 0.00 and 1.00.\n`,\n});\n\n\n// --- Agent Flow ---\n\nexport const agentTraderFlow = ai.defineFlow<\n  typeof AgentTraderInputSchema, // Takes original input type\n  typeof AgentTraderOutputSchema // Returns original output type\n>({\n  name: 'agentTraderFlow',\n  inputSchema: AgentTraderInputSchema,\n  outputSchema: AgentTraderOutputSchema,\n}, async (input) => {\n    console.log(\"Agent Trader Flow Raw Input:\", JSON.stringify(input, null, 2));\n\n    // Helper function for formatting currency\n    const formatCurrency = (value: number) => value?.toFixed(2) ?? 'N/A';\n\n    // Pre-process input for the prompt: Format currency values and join symbols\n    const promptInput: z.infer<typeof AgentTraderPromptInputSchema> = {\n        ...input,\n        virtualBalanceFormatted: formatCurrency(input.virtualBalance),\n        currentPortfolio: input.currentPortfolio.map(item => ({\n            ...item,\n            purchasePriceFormatted: formatCurrency(item.purchasePrice),\n            currentPriceFormatted: formatCurrency(item.currentPrice),\n        })),\n        monitoredSymbolsFormatted: input.monitoredSymbols.join(', '), // Pre-format the symbols list\n    };\n\n    console.log(\"Agent Trader Flow Processed Prompt Input:\", JSON.stringify(promptInput, null, 2));\n\n    // The prompt itself instructs the LLM to use the tools.\n    // Genkit handles the tool calling loop based on the prompt instructions.\n    const { output } = await agentTraderPrompt(promptInput); // No need to pass handlebarsOptions\n\n    if (!output) {\n        console.error(\"Agent Trader Flow: No output received from the prompt.\");\n        throw new Error(\"Agent failed to produce an output.\");\n    }\n\n    console.log(\"Agent Trader Flow Output:\", JSON.stringify(output, null, 2));\n\n    // Basic validation on output\n     if (!output.tradeDecisions || !Array.isArray(output.tradeDecisions)) {\n         console.error(\"Agent Trader Flow: Invalid tradeDecisions format in output.\");\n         throw new Error(\"Agent produced invalid trade decisions format.\");\n     }\n\n    // Further validation could be added here (e.g., check quantities, symbols, confidence scores)\n     output.tradeDecisions.forEach(decision => {\n         // Ensure quantity is a positive integer for buy/sell\n         if ((decision.action === 'buy' || decision.action === 'sell')) {\n             if (decision.quantity === undefined || decision.quantity === null || !Number.isInteger(decision.quantity) || decision.quantity <= 0) {\n                 console.warn(`Agent Trader Flow: Invalid or missing quantity (${decision.quantity}) for ${decision.action} action on ${decision.symbol}. Correcting or discarding.`);\n                 // Set quantity to 0 to prevent execution downstream and add note to reasoning\n                 decision.quantity = 0;\n                 decision.reasoning += ' (Invalid quantity provided by agent)';\n\n             }\n         }\n         if (decision.confidenceScore && (decision.confidenceScore < 0 || decision.confidenceScore > 1)) {\n             console.warn(`Agent Trader Flow: Invalid confidence score (${decision.confidenceScore}) for ${decision.symbol}. Clamping to [0, 1].`);\n             decision.confidenceScore = Math.max(0, Math.min(1, decision.confidenceScore));\n         }\n     });\n\n\n    return output;\n});\n\n/**\n * Public function to invoke the agent trader flow.\n * This acts as the entry point from the application code.\n * @param input Input data including persona, portfolio, balance, and symbols.\n * @returns A promise resolving to the agent's trade decisions and strategy adjustments.\n */\nexport async function runAgentTrader(input: AgentTraderInput): Promise<AgentTraderOutput> {\n  return agentTraderFlow(input);\n}\n\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 749, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/recommend-stock.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Recommends stocks based on a chosen investment strategy and optional user risk profile, explaining the reasons. Uses real data from Yahoo Finance.\n *\n * - recommendStock - A function that recommends a stock based on a strategy and risk profile.\n * - RecommendStockInput - The input type for the recommendStock function.\n * - RecommendStockOutput - The return type for the recommendStock function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n// Import REAL data fetching functions and types\nimport {CompanyPerformance, getCompanyPerformance, getStockData, StockData} from '@/services/stock-data';\n\nconst RecommendStockInputSchema = z.object({\n  stockSymbol: z.string().describe('The stock symbol to evaluate (e.g., AAPL).'),\n  investmentStrategy: z.string().describe('The investment strategy to use (e.g., value investing, growth investing, income investing).'),\n  userRiskProfile: z.string().optional().describe('Optional user risk profile (e.g., low, medium, high, aggressive, moderate, conservative).'),\n});\nexport type RecommendStockInput = z.infer<typeof RecommendStockInputSchema>;\n\nconst RecommendStockOutputSchema = z.object({\n  recommendation: z.string().describe('The recommendation (e.g., Buy, Sell, Hold, Strong Buy, Strong Sell).'),\n  reasoning: z.string().describe('The reasoning behind the recommendation, based on the investment strategy, risk profile (if provided), and fetched data.'),\n  strategyScore: z.number().min(0).max(100).describe('A numerical score (0-100) indicating how well the stock fits the specified strategy.'),\n});\nexport type RecommendStockOutput = z.infer<typeof RecommendStockOutputSchema>;\n\nexport async function recommendStock(input: RecommendStockInput): Promise<RecommendStockOutput> {\n  return recommendStockFlow(input);\n}\n\n\n// Tool to get current stock data - USES REAL API\nconst getCurrentStockDataTool = ai.defineTool({\n  name: 'getCurrentStockDataForRecommendation',\n  description: 'Retrieves the latest price, daily high, daily low, and company name for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Matches the actual StockData interface\n  outputSchema: z.object({\n    symbol: z.string(),\n    price: z.number(),\n    dailyHigh: z.number(),\n    dailyLow: z.number(),\n    companyName: z.string(),\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Recommendation Tool: Fetching stock data for ${symbol}...`);\n        const data = await getStockData(symbol); // Call the real service function\n        console.log(`Recommendation Tool: Stock data received for ${symbol}.`);\n        return data;\n    } catch (error: any) {\n        console.error(`Recommendation Tool Error: Error fetching stock data for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n// Tool to get company performance data - USES REAL API\nconst getCompanyPerformanceTool = ai.defineTool({\n  name: 'getCompanyPerformanceDataForRecommendation',\n  description: 'Retrieves key performance metrics like revenue (if available), EPS, and P/E ratio for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Matches the actual CompanyPerformance interface\n  outputSchema: z.object({\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(), // Revenue is optional/nullable\n      eps: z.number(),\n      peRatio: z.number(), // Allow NaN\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Recommendation Tool: Fetching company performance for ${symbol}...`);\n        const data = await getCompanyPerformance(symbol); // Call the real service function\n        console.log(`Recommendation Tool: Company performance received for ${symbol}.`);\n        return data;\n    } catch (error: any) {\n        console.error(`Recommendation Tool Error: Error fetching company performance for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch company performance data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n\n// Tool specifically for evaluating the stock against the strategy and profile using the REAL data\n// This tool's internal logic remains somewhat simplified for demonstration, but it now consumes real data structures.\nconst evaluateStockForStrategyTool = ai.defineTool({\n  name: 'evaluateStockForStrategy',\n  description: 'Evaluates how well a given stock aligns with a specific investment strategy and user risk profile, using provided real stock data and company performance metrics. Returns a recommendation, reasoning, and strategy fit score.',\n  inputSchema: z.object({\n    stockSymbol: z.string().describe('The stock symbol being evaluated.'),\n    investmentStrategy: z.string().describe('The investment strategy provided.'),\n    userRiskProfile: z.string().optional().describe('The user risk profile provided (if any).'),\n    stockData: z.object({ // Matches REAL StockData structure\n      symbol: z.string(),\n      price: z.number(),\n      dailyHigh: z.number(),\n      dailyLow: z.number(),\n      companyName: z.string(),\n    }).describe('Current stock data for the symbol from Yahoo Finance.'),\n    companyPerformance: z.object({ // Matches REAL CompanyPerformance structure\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(),\n      eps: z.number(),\n      peRatio: z.number(), // Can be NaN\n    }).describe('Company performance metrics for the symbol from Yahoo Finance.'),\n  }),\n  outputSchema: z.object({ // Matches RecommendStockOutputSchema\n    recommendation: z.string().describe('The recommendation (e.g., Buy, Sell, Hold, Strong Buy, Strong Sell).'),\n    reasoning: z.string().describe('Detailed reasoning linking the data, strategy, and risk profile to the recommendation.'),\n    strategyScore: z.number().min(0).max(100).describe('A score (0-100) indicating alignment with the strategy.'),\n  }),\n}, async (input) => {\n  // --- Simplified evaluation logic using REAL data fields ---\n  let recommendation = 'Hold';\n  let reasoning = `Analyzing ${input.stockSymbol} (${input.stockData.companyName}) for a ${input.investmentStrategy} strategy`;\n   if (input.userRiskProfile) {\n       reasoning += ` with a ${input.userRiskProfile} risk profile. `;\n   } else {\n       reasoning += `. `;\n   }\n   // Format PE and EPS carefully, handling potential NaN/null\n   const peRatioFormatted = (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio)) ? input.companyPerformance.peRatio.toFixed(2) : 'N/A';\n   const epsFormatted = (typeof input.companyPerformance.eps === 'number') ? `$${input.companyPerformance.eps.toFixed(2)}` : 'N/A';\n   const revenueFormatted = (typeof input.companyPerformance.revenue === 'number') ? `$${input.companyPerformance.revenue.toLocaleString()}` : 'N/A';\n\n   reasoning += `Current Price: $${input.stockData.price.toFixed(2)}, P/E Ratio: ${peRatioFormatted}, EPS: ${epsFormatted}, Revenue: ${revenueFormatted}. `;\n\n  let score = 50; // Start neutral\n\n  // Simple logic based on strategy (using real data fields)\n  // Note: P/E might be NaN\n  if (input.investmentStrategy === 'value_investing') {\n    if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio < 18) {\n      recommendation = 'Buy';\n      reasoning += 'The P/E ratio is relatively low, suggesting potential value. ';\n      score += 25;\n    } else if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio > 30) {\n      recommendation = 'Sell';\n      reasoning += 'The P/E ratio seems high for a value strategy. ';\n      score -= 15;\n    } else if (isNaN(input.companyPerformance.peRatio)) {\n         reasoning += 'P/E ratio is not available (possibly negative earnings), making value assessment difficult based on P/E alone. ';\n         score -= 5; // Slightly penalize lack of PE for value strategy\n    } else {\n        reasoning += 'The valuation based on P/E seems moderate. ';\n    }\n  } else if (input.investmentStrategy === 'growth_investing') {\n     // Check for positive EPS and potentially revenue growth (revenue is optional)\n    if (typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps > 1.5) { // Example threshold for positive EPS\n      recommendation = 'Buy';\n      reasoning += 'Positive EPS indicates profitability. ';\n      score += 20;\n       // Add bonus points if revenue is high (example)\n       if (typeof input.companyPerformance.revenue === 'number' && input.companyPerformance.revenue > 10e9) {\n            reasoning += 'Significant revenue suggests strong market presence. ';\n           score += 15;\n       }\n    } else if (typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps <= 0) {\n        recommendation = 'Hold';\n        reasoning += 'Negative or zero EPS is a concern for growth. ';\n        score -= 10;\n    } else {\n        reasoning += 'Growth indicators based on available data are average. ';\n    }\n  } else if (input.investmentStrategy === 'income_investing') {\n      // This would typically involve checking dividend yield, which isn't in our current data.\n      reasoning += `Income strategy analysis requires dividend data not currently available. Evaluating based on general stability. `;\n      // Penalize score slightly due to lack of relevant data\n      score -= 10;\n      // Example: Favor companies with moderate PE and positive EPS for stability\n      if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio < 25 && input.companyPerformance.peRatio > 10 &&\n          typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps > 0) {\n          reasoning += 'Seems relatively stable based on P/E and EPS. ';\n          recommendation = 'Hold'; // Cautious Hold for income without dividend info\n          score += 15;\n      }\n  }\n   else {\n      reasoning += `Standard analysis applied for ${input.investmentStrategy}. `;\n      score += (Math.random() - 0.5) * 10; // Add minor randomness\n  }\n\n  // Adjust based on risk profile (example)\n  if (input.userRiskProfile) {\n      if ((input.userRiskProfile.toLowerCase() === 'low' || input.userRiskProfile.toLowerCase() === 'conservative') && score > 60 && recommendation.includes('Buy')) {\n           reasoning += `Considering the conservative profile, a 'Hold' might be safer despite positive indicators. `;\n           recommendation = 'Hold';\n           score -= 10;\n      }\n       if ((input.userRiskProfile.toLowerCase() === 'high' || input.userRiskProfile.toLowerCase() === 'aggressive') && score > 70 && recommendation === 'Buy') {\n            reasoning += `Given the aggressive profile, this looks like a strong opportunity. `;\n            recommendation = 'Strong Buy';\n            score += 5;\n       }\n        if ((input.userRiskProfile.toLowerCase() === 'high' || input.userRiskProfile.toLowerCase() === 'aggressive') && score < 40 && recommendation === 'Sell') {\n            reasoning += `Given the aggressive profile, selling might be premature unless fundamentals are very weak. Consider holding. `;\n            recommendation = 'Hold'; // Less likely to sell on moderate weakness\n            score += 5; // Slight score increase for holding potential upside\n       }\n  }\n\n\n  score = Math.max(0, Math.min(100, Math.round(score))); // Clamp score between 0 and 100\n\n  return {\n    recommendation: recommendation,\n    reasoning: reasoning.trim(),\n    strategyScore: score,\n  };\n});\n\n\nconst recommendStockPrompt = ai.definePrompt({\n  name: 'recommendStockPrompt',\n  tools: [getCurrentStockDataTool, getCompanyPerformanceTool, evaluateStockForStrategyTool], // Include all necessary tools\n  input: {\n    schema: z.object({\n      stockSymbol: z.string().describe('The stock symbol to evaluate (e.g., AAPL).'),\n      investmentStrategy: z.string().describe('The investment strategy to use (e.g., value investing, growth investing).'),\n      userRiskProfile: z.string().optional().describe('Optional user risk profile (e.g., aggressive, moderate, conservative).'),\n      // Data is fetched by tools within the flow\n    }),\n  },\n  output: {\n    schema: RecommendStockOutputSchema, // Matches the flow's output\n  },\n  // The prompt guides the LLM on how to use the tools.\n  prompt: `\n    You need to provide a stock recommendation for {{{stockSymbol}}}.\n    The user's desired investment strategy is {{{investmentStrategy}}}.\n    {{#if userRiskProfile}}The user's risk profile is {{{userRiskProfile}}}.{{/if}}\n\n    Instructions:\n    1.  First, use the 'getCurrentStockDataForRecommendation' tool to get the latest stock price data for {{{stockSymbol}}}. Handle potential errors (e.g., invalid symbol) gracefully by noting the failure.\n    2.  Then, use the 'getCompanyPerformanceDataForRecommendation' tool to get the latest company performance metrics (Revenue, EPS, P/E) for {{{stockSymbol}}}. Handle potential errors gracefully.\n    3.  If EITHER data fetching step (1 or 2) fails, DO NOT proceed to step 4. Instead, return a 'Hold' recommendation with reasoning explaining that necessary data could not be fetched, and assign a strategyScore of 0.\n    4.  If both data fetching steps were successful, use the 'evaluateStockForStrategy' tool. Pass the fetched stock data, company performance data, the stock symbol ('{{{stockSymbol}}}'), the investment strategy ('{{{investmentStrategy}}}'), and the user risk profile ('{{{userRiskProfile}}}' if provided, otherwise pass nothing/null for risk profile) to this tool.\n    5.  Return the exact output provided by the 'evaluateStockForStrategy' tool. Do not add any other text or explanation. Make sure the output strictly follows the required JSON schema (recommendation, reasoning, strategyScore).\n    `,\n});\n\n\nconst recommendStockFlow = ai.defineFlow<\n  typeof RecommendStockInputSchema,\n  typeof RecommendStockOutputSchema\n>({\n  name: 'recommendStockFlow',\n  inputSchema: RecommendStockInputSchema,\n  outputSchema: RecommendStockOutputSchema,\n}, async (input) => {\n    console.log(\"Recommend Stock Flow Input:\", input);\n\n    // The prompt now orchestrates the tool calls. Genkit will handle fetching\n    // data using the tools based on the prompt instructions before potentially calling\n    // the evaluation tool. It also handles the error case where data fetching fails.\n\n    const { output } = await recommendStockPrompt(input);\n\n    if (!output) {\n        console.error(\"Recommend Stock Flow: No output received from the prompt execution.\");\n        // This might happen if the prompt itself errors or if the LLM fails to generate valid JSON according to the schema\n        // after potentially hitting the error path in the prompt logic (data fetch failure).\n        // Return a generic error state or re-throw.\n         return {\n            recommendation: 'Error',\n            reasoning: 'Failed to generate recommendation due to an internal error or inability to fetch required data.',\n            strategyScore: 0,\n         };\n        // Or: throw new Error(\"Recommendation generation failed to produce an output.\");\n    }\n\n     console.log(\"Recommend Stock Flow Output:\", output);\n\n     // Basic validation (already somewhat enforced by Zod output schema in prompt)\n     if (!output.recommendation || !output.reasoning || output.strategyScore === undefined || typeof output.strategyScore !== 'number') {\n        console.error(\"Recommend Stock Flow: Output is missing required fields or has incorrect types.\");\n         // Even if the LLM produced *something*, if it doesn't match the schema, return an error state.\n         return {\n            recommendation: 'Error',\n            reasoning: 'Generated recommendation has an invalid format.',\n            strategyScore: 0,\n         };\n        // Or: throw new Error(\"Generated recommendation is incomplete or has wrong types.\");\n     }\n\n\n    return output;\n});\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1031, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/generate-investment-persona.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates an investment persona based on user input.\n *\n * - generateInvestmentPersona - A function that generates the investment persona.\n * - GenerateInvestmentPersonaInput - The input type for the generateInvestmentPersona function.\n * - GenerateInvestmentPersonaOutput - The return type for the generateInvestmentPersona function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateInvestmentPersonaInputSchema = z.object({\n  userInput: z\n    .string()\n    .describe(\n      'A description of the users investment goals, risk appetite, and time horizon.'\n    ),\n});\nexport type GenerateInvestmentPersonaInput = z.infer<typeof GenerateInvestmentPersonaInputSchema>;\n\nconst GenerateInvestmentPersonaOutputSchema = z.object({\n  riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n  investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n  timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n  investmentAmount: z.string().describe('The users investment amount.'),\n  investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n});\nexport type GenerateInvestmentPersonaOutput = z.infer<typeof GenerateInvestmentPersonaOutputSchema>;\n\nexport async function generateInvestmentPersona(input: GenerateInvestmentPersonaInput): Promise<GenerateInvestmentPersonaOutput> {\n  return generateInvestmentPersonaFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInvestmentPersonaPrompt',\n  input: {\n    schema: z.object({\n      userInput: z\n        .string()\n        .describe(\n          'A description of the users investment goals, risk appetite, and time horizon.'\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n      investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n      timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n      investmentAmount: z.string().describe('The users investment amount.'),\n      investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n    }),\n  },\n  prompt: `You are an expert investment advisor. Please use the following information to generate an investment persona for the user.\n\nUser Input: {{{userInput}}}\n\nBased on the user input, please determine the following:\n\n*   riskAppetite: The users risk appetite (e.g., low, medium, high).\n*   investmentGoals: The users investment goals (e.g., retirement, growth, income).\n*   timeHorizon: The users time horizon (e.g., short, medium, long).\n*   investmentAmount: The users investment amount.\n*   investmentStyle: The users investment style (e.g., value, growth, index).\n\nPlease output the investment persona in JSON format.\n`,\n});\n\nconst generateInvestmentPersonaFlow = ai.defineFlow<\n  typeof GenerateInvestmentPersonaInputSchema,\n  typeof GenerateInvestmentPersonaOutputSchema\n>(\n  {\n    name: 'generateInvestmentPersonaFlow',\n    inputSchema: GenerateInvestmentPersonaInputSchema,\n    outputSchema: GenerateInvestmentPersonaOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,uCAAuC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpD,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACtC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGO,eAAe,uCAAuB,GAAvB,0BAA0B,KAAqC;IACnF,OAAO,8BAA8B;AACvC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,QAAQ,CACP;QAEN;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAClC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACrC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACjC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACtC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACvC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;AAaX,CAAC;AACD;AAEA,MAAM,gCAAgC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIjD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IApDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 1113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 1185, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 1199, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 1213, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}