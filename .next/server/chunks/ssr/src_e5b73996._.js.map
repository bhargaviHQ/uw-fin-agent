{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/agent-trader.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview An AI agent that monitors stock market conditions and makes trades based on a user's investment persona and strategy.\n *\n * - runAgentTrader - Public function to invoke the agent trader flow.\n * - AgentTraderInput - The input type for the agentTrader function.\n * - AgentTraderOutput - The return type for the agentTrader function.\n * - agentTraderFlow - The Genkit flow definition.\n */\n\nimport { ai } from '@/ai/ai-instance';\nimport { z } from 'genkit';\nimport type { StockData, CompanyPerformance, NewsHeadline } from '@/services/stock-data';\n// Import the actual data fetching functions\nimport { getStockData, getCompanyPerformance, getNewsHeadlines } from '@/services/stock-data'; // Ensure getNewsHeadlines now uses NewsAPI\nimport type { GenerateInvestmentPersonaOutput } from '@/ai/flows/generate-investment-persona'; // Import persona type\nimport type { PortfolioItem } from '@/types';\n\n// Define Zod schema for the persona within the input\nconst InvestmentPersonaSchema = z.object({\n  riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n  investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n  timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n  investmentAmount: z.string().describe('The users investment amount.'),\n  investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n});\n\nconst PortfolioItemSchema = z.object({\n  symbol: z.string(),\n  companyName: z.string(),\n  quantity: z.number(),\n  purchasePrice: z.number(),\n  currentPrice: z.number(),\n});\n// Extended schema for prompt input with formatted strings\nconst PortfolioItemPromptSchema = PortfolioItemSchema.extend({\n    purchasePriceFormatted: z.string(),\n    currentPriceFormatted: z.string(),\n});\n\n\nconst AgentTraderInputSchema = z.object({\n  userPersona: InvestmentPersonaSchema.describe(\"The user's investment persona.\"),\n  currentPortfolio: z.array(PortfolioItemSchema).describe(\"The user's current stock portfolio.\"),\n  virtualBalance: z.number().describe(\"The user's current virtual cash balance.\"),\n  monitoredSymbols: z.array(z.string()).describe(\"A list of stock symbols the agent should actively monitor.\"),\n});\nexport type AgentTraderInput = z.infer<typeof AgentTraderInputSchema>;\n\n// Schema for the data actually passed to the prompt, including formatted currency and symbols\nconst AgentTraderPromptInputSchema = AgentTraderInputSchema.extend({\n    currentPortfolio: z.array(PortfolioItemPromptSchema), // Use extended portfolio schema\n    virtualBalanceFormatted: z.string(), // Add formatted balance\n    monitoredSymbolsFormatted: z.string().describe(\"Comma-separated list of monitored stock symbols.\"), // Add formatted symbols string\n});\n\n// Define the structure for a trade decision\nconst TradeDecisionSchema = z.object({\n    action: z.enum(['buy', 'sell', 'hold']).describe(\"The recommended action: buy, sell, or hold.\"),\n    symbol: z.string().describe(\"The stock symbol for the action.\"),\n    quantity: z.number().optional().describe(\"The number of shares to trade (required for buy/sell).\"),\n    reasoning: z.string().describe(\"The justification for the trade decision based on the persona, strategy, market data, and recent news.\"), // Updated description\n    confidenceScore: z.number().min(0).max(1).step(0.01).optional().describe(\"A score (0.00-1.00) indicating the agent's confidence in this decision.\"), // Changed to 0-1 scale\n});\n\n\nconst AgentTraderOutputSchema = z.object({\n  tradeDecisions: z.array(TradeDecisionSchema).describe(\"A list of trade decisions made by the agent for the monitored symbols.\"),\n  overallStrategyAdjustment: z.string().optional().describe(\"Any suggested adjustments to the overall investment strategy based on current conditions and news.\"), // Updated description\n});\nexport type AgentTraderOutput = z.infer<typeof AgentTraderOutputSchema>;\n\n// --- Tools for the Agent ---\n\n// Tool to get current stock data - Uses REAL API call (Yahoo Finance)\nconst getCurrentStockDataTool = ai.defineTool({\n  name: 'getCurrentStockData',\n  description: 'Retrieves the latest price, daily high, daily low, and company name for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Use the actual StockData interface structure\n  outputSchema: z.object({\n    symbol: z.string(),\n    price: z.number(),\n    dailyHigh: z.number(),\n    dailyLow: z.number(),\n    companyName: z.string(),\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching stock data for ${symbol} from Yahoo Finance...`);\n        const data = await getStockData(symbol); // Call the real service function\n        console.log(`Agent Tool: Stock data received for ${symbol}:`, data);\n        return data;\n    } catch (error: any) {\n        console.error(`Agent Tool Error: Error fetching stock data for ${symbol}:`, error.message);\n        // Provide a more informative error message to the LLM\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}. The symbol might be invalid or the service is unavailable.`);\n    }\n});\n\n// Tool to get company performance data - Uses REAL API call (Yahoo Finance)\nconst getCompanyPerformanceTool = ai.defineTool({\n  name: 'getCompanyPerformanceData',\n  description: 'Retrieves key performance metrics like revenue (if available), EPS, and P/E ratio for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Use the actual CompanyPerformance interface structure, note revenue is optional\n   outputSchema: z.object({\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(), // Mark revenue as optional and potentially null\n      eps: z.number(),\n      peRatio: z.number(), // Allow NaN for PE Ratio\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching company performance for ${symbol} from Yahoo Finance...`);\n        const data = await getCompanyPerformance(symbol); // Call the real service function\n        console.log(`Agent Tool: Company performance received for ${symbol}:`, data);\n        return data;\n    } catch (error: any) {\n        console.error(`Agent Tool Error: Error fetching company performance for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch company performance data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n// Tool to get recent news headlines - Uses REAL API call (NewsAPI.org via service)\nconst getRecentNewsTool = ai.defineTool({\n    name: 'getRecentNewsHeadlines',\n    // Updated description to mention NewsAPI.org\n    description: 'Retrieves recent news headlines for a given stock symbol from NewsAPI.org to understand market sentiment and potential impacts.',\n    inputSchema: z.object({\n      symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n    }),\n    // Use the actual NewsHeadline interface structure\n    outputSchema: z.array(z.object({\n        title: z.string(),\n        url: z.string(),\n        source: z.string(),\n        publishedAt: z.string(), // ISO date string\n    })).describe(\"An array of recent news headlines from NewsAPI.org.\"),\n}, async({ symbol }) => {\n    try {\n        console.log(`Agent Tool: Fetching news headlines for ${symbol} from NewsAPI.org...`);\n        // Calls the updated getNewsHeadlines function in stock-data.ts\n        const data = await getNewsHeadlines(symbol);\n        console.log(`Agent Tool: News headlines received for ${symbol}:`, data.length > 0 ? `${data.length} headlines` : 'No headlines');\n        return data;\n    } catch (error: any) {\n         console.error(`Agent Tool Error: Error fetching news headlines for ${symbol}:`, error.message);\n         // Pass specific error messages back\n         throw new Error(`Failed to fetch news headlines for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n\n// --- Agent Prompt ---\n\nconst agentTraderPrompt = ai.definePrompt({\n  name: 'agentTraderPrompt',\n  tools: [getCurrentStockDataTool, getCompanyPerformanceTool, getRecentNewsTool], // Ensure all tools are included\n  input: { schema: AgentTraderPromptInputSchema }, // Use the extended input schema with formatted strings\n  output: { schema: AgentTraderOutputSchema },\n  // Removed customize block as helpers are no longer needed in the template\n  // Updated prompt description to mention NewsAPI.org source\n  // Updated prompt to use pre-formatted currency and symbols strings\n  prompt: `You are an autonomous investment agent. Your goal is to manage a simulated stock portfolio based on the provided user persona and current market conditions, including recent news fetched from NewsAPI.org.\n\nUser Persona:\nRisk Appetite: {{{userPersona.riskAppetite}}}\nInvestment Goals: {{{userPersona.investmentGoals}}}\nTime Horizon: {{{userPersona.timeHorizon}}}\nInvestment Amount: {{{userPersona.investmentAmount}}} (Note: Use Virtual Balance for available cash)\nInvestment Style: {{{userPersona.investmentStyle}}}\n\nCurrent Portfolio:\n{{#if currentPortfolio.length}}\n{{#each currentPortfolio}}\n- {{symbol}}: {{quantity}} shares @ avg $ {{purchasePriceFormatted}} (Current: $ {{currentPriceFormatted}})\n{{/each}}\n{{else}}\n- Portfolio is empty.\n{{/if}}\nVirtual Balance: $ {{virtualBalanceFormatted}}\n\nMonitored Symbols: {{{monitoredSymbolsFormatted}}}\n\nInstructions:\n1.  For EACH monitored symbol in the list [{{{monitoredSymbolsFormatted}}}]:\n    a.  Use the 'getCurrentStockData' tool to get the latest market data (price, high, low, company name) from Yahoo Finance.\n    b.  Use the 'getCompanyPerformanceData' tool to get company performance metrics (Revenue (if available), EPS, P/E ratio) from Yahoo Finance. Note that P/E might be NaN if earnings are negative.\n    c.  Use the 'getRecentNewsHeadlines' tool to fetch recent news headlines from NewsAPI.org.\n    d.  If any tool fails for a symbol (e.g., invalid symbol, API error, rate limit), make a note of the failure in your reasoning for that symbol and proceed to the next symbol. Do not halt the entire process. Make a 'hold' decision with reasoning indicating the data fetch failure.\n2.  Analyze the fetched data (stock price, performance metrics, news headlines) in the context of the user's persona (risk, goals, style) and their current portfolio holdings. Pay close attention to how news (especially from NewsAPI.org) might impact the stock's short-term and long-term prospects. Consider the P/E ratio (even if NaN) and EPS.\n3.  Decide whether to 'buy', 'sell', or 'hold' each monitored stock.\n4.  If buying, determine a reasonable quantity based on the virtual balance (use the numerical value, not the formatted string, for calculation checks if needed, but remember the balance is $ {{virtualBalanceFormatted}}), risk profile, news sentiment, and diversification principles. Avoid overly concentrating the portfolio. A typical single stock position might be 5-15% of the total portfolio value (holdings + balance). Do not exceed available virtual balance. Factor in potential risks highlighted in the news. Ensure quantity is a positive whole number.\n5.  If selling, determine the quantity. You can sell a portion or all of the holding for that symbol. Consider if negative news warrants reducing exposure. Only sell shares currently held in the portfolio. Ensure quantity is a positive whole number and does not exceed owned shares.\n6.  For each decision ('buy', 'sell', 'hold'), provide clear, concise reasoning, linking it back to the persona, strategy, data, AND NEWS sentiment from NewsAPI.org. Assign a confidence score between 0.00 and 1.00 (e.g., 0.75).\n7.  Optionally, suggest an 'overallStrategyAdjustment' if current market conditions, news trends (from NewsAPI.org), or portfolio performance warrant a shift in approach (e.g., \"Consider shifting slightly more defensive due to widespread negative tech news from NewsAPI.org and market volatility.\").\n\nOutput Format:\nReturn a JSON object matching the AgentTraderOutput schema, containing an array of 'tradeDecisions' (one for each monitored symbol, even if data fetch failed) and optionally 'overallStrategyAdjustment'. Ensure 'quantity' is provided AND is a positive whole number for 'buy' and 'sell' actions. Ensure 'confidenceScore' is between 0.00 and 1.00.\n`,\n});\n\n\n// --- Agent Flow ---\n\nexport const agentTraderFlow = ai.defineFlow<\n  typeof AgentTraderInputSchema, // Takes original input type\n  typeof AgentTraderOutputSchema // Returns original output type\n>({\n  name: 'agentTraderFlow',\n  inputSchema: AgentTraderInputSchema,\n  outputSchema: AgentTraderOutputSchema,\n}, async (input) => {\n    console.log(\"Agent Trader Flow Raw Input:\", JSON.stringify(input, null, 2));\n\n    // Helper function for formatting currency\n    const formatCurrency = (value: number) => value?.toFixed(2) ?? 'N/A';\n\n    // Pre-process input for the prompt: Format currency values and join symbols\n    const promptInput: z.infer<typeof AgentTraderPromptInputSchema> = {\n        ...input,\n        virtualBalanceFormatted: formatCurrency(input.virtualBalance),\n        currentPortfolio: input.currentPortfolio.map(item => ({\n            ...item,\n            purchasePriceFormatted: formatCurrency(item.purchasePrice),\n            currentPriceFormatted: formatCurrency(item.currentPrice),\n        })),\n        monitoredSymbolsFormatted: input.monitoredSymbols.join(', '), // Pre-format the symbols list\n    };\n\n    console.log(\"Agent Trader Flow Processed Prompt Input:\", JSON.stringify(promptInput, null, 2));\n\n    // The prompt itself instructs the LLM to use the tools.\n    // Genkit handles the tool calling loop based on the prompt instructions.\n    const { output } = await agentTraderPrompt(promptInput); // No need to pass handlebarsOptions\n\n    if (!output) {\n        console.error(\"Agent Trader Flow: No output received from the prompt.\");\n        throw new Error(\"Agent failed to produce an output.\");\n    }\n\n    console.log(\"Agent Trader Flow Output:\", JSON.stringify(output, null, 2));\n\n    // Basic validation on output\n     if (!output.tradeDecisions || !Array.isArray(output.tradeDecisions)) {\n         console.error(\"Agent Trader Flow: Invalid tradeDecisions format in output.\");\n         throw new Error(\"Agent produced invalid trade decisions format.\");\n     }\n\n    // Further validation could be added here (e.g., check quantities, symbols, confidence scores)\n     output.tradeDecisions.forEach(decision => {\n         // Ensure quantity is a positive integer for buy/sell\n         if ((decision.action === 'buy' || decision.action === 'sell')) {\n             if (decision.quantity === undefined || decision.quantity === null || !Number.isInteger(decision.quantity) || decision.quantity <= 0) {\n                 console.warn(`Agent Trader Flow: Invalid or missing quantity (${decision.quantity}) for ${decision.action} action on ${decision.symbol}. Correcting or discarding.`);\n                 // Set quantity to 0 to prevent execution downstream and add note to reasoning\n                 decision.quantity = 0;\n                 decision.reasoning += ' (Invalid quantity provided by agent)';\n\n             }\n         }\n         if (decision.confidenceScore && (decision.confidenceScore < 0 || decision.confidenceScore > 1)) {\n             console.warn(`Agent Trader Flow: Invalid confidence score (${decision.confidenceScore}) for ${decision.symbol}. Clamping to [0, 1].`);\n             decision.confidenceScore = Math.max(0, Math.min(1, decision.confidenceScore));\n         }\n     });\n\n\n    return output;\n});\n\n/**\n * Public function to invoke the agent trader flow.\n * This acts as the entry point from the application code.\n * @param input Input data including persona, portfolio, balance, and symbols.\n * @returns A promise resolving to the agent's trade decisions and strategy adjustments.\n */\nexport async function runAgentTrader(input: AgentTraderInput): Promise<AgentTraderOutput> {\n  return agentTraderFlow(input);\n}\n\n"],"names":[],"mappings":";;;;;;IAmNa;IAwES","debugId":null}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/header.tsx"],"sourcesContent":["import { TrendingUp } from 'lucide-react';\n// Removed imports: Button, useAuth\n\nexport function Header() {\n  // Removed useAuth hook call\n\n  return (\n    <header className=\"bg-primary text-primary-foreground shadow-md\">\n      <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\"> {/* Use justify-between */}\n        <div className=\"flex items-center\"> {/* Group logo and title */}\n            <TrendingUp className=\"h-8 w-8 mr-3\" />\n            <h1 className=\"text-2xl font-bold\">UW FosterX</h1>\n        </div>\n        {/* Removed user display and logout button */}\n      </div>\n    </header>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAGO,SAAS;IACd,4BAA4B;IAE5B,qBACE,8OAAC;QAAO,WAAU;kBAChB,cAAA,8OAAC;YAAI,WAAU;;gBAAgE;8BAC7E,8OAAC;oBAAI,WAAU;;wBAAoB;sCAC/B,8OAAC,kNAAA,CAAA,aAAU;4BAAC,WAAU;;;;;;sCACtB,8OAAC;4BAAG,WAAU;sCAAqB;;;;;;;;;;;;;;;;;;;;;;;AAM/C","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/virtual-balance.tsx"],"sourcesContent":["import { DollarSign } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\ninterface VirtualBalanceProps {\n  balance: number;\n}\n\nexport function VirtualBalance({ balance }: VirtualBalanceProps) {\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">Virtual Balance</CardTitle>\n        <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">\n          ${balance.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAMO,SAAS,eAAe,EAAE,OAAO,EAAuB;IAC7D,qBACE,8OAAC,gIAAA,CAAA,OAAI;;0BACH,8OAAC,gIAAA,CAAA,aAAU;gBAAC,WAAU;;kCACpB,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;kCAAsB;;;;;;kCAC3C,8OAAC,kNAAA,CAAA,aAAU;wBAAC,WAAU;;;;;;;;;;;;0BAExB,8OAAC,gIAAA,CAAA,cAAW;0BACV,cAAA,8OAAC;oBAAI,WAAU;;wBAAqB;wBAChC,QAAQ,cAAc,CAAC,WAAW;4BAAE,uBAAuB;4BAAG,uBAAuB;wBAAE;;;;;;;;;;;;;;;;;;AAKnG","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/services/stock-data.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Service functions for retrieving stock data, news, and company performance.\n * Uses yahoo-finance2 for stock/performance and direct fetch for NewsAPI.org news.\n */\nimport yahooFinance from 'yahoo-finance2';\nimport type { Quote } from 'yahoo-finance2/dist/esm/src/modules/quote';\nimport type { QuoteSummaryResult } from 'yahoo-finance2/dist/esm/src/modules/quoteSummary';\n// NewsAPI library removed, will use fetch directly\n\n// --- Types ---\n\n/**\n * Represents real-time stock data.\n */\nexport interface StockData {\n  /**\n   * The stock symbol (e.g., AAPL).\n   */\n  symbol: string;\n  /**\n   * The current price of the stock.\n   */\n  price: number;\n  /**\n   * The daily high price of the stock.\n   */\n  dailyHigh: number;\n  /**\n   * The daily low price of the stock.\n   */\n  dailyLow: number;\n  /**\n   * The company name.\n   */\n  companyName: string;\n}\n\n/**\n * Represents a news article headline.\n */\nexport interface NewsHeadline {\n    /**\n     * The headline text.\n     */\n    title: string;\n    /**\n     * URL to the full article.\n     */\n    url: string;\n    /**\n     * Source of the news article.\n     */\n    source: string;\n    /**\n     * Publication date/time (ISO string).\n     */\n    publishedAt: string;\n}\n\n\n/**\n * Represents company performance metrics.\n */\nexport interface CompanyPerformance {\n  /**\n   * The stock symbol (e.g., AAPL).\n   */\n  symbol: string;\n  /**\n   * The latest quarterly revenue (Note: Often requires premium API or may be unavailable).\n   * This field might be null or undefined.\n   */\n  revenue?: number | null;\n  /**\n   * The latest quarterly earnings per share (Trailing Twelve Months).\n   */\n  eps: number;\n  /**\n   * The price-to-earnings ratio (Trailing Twelve Months).\n   */\n  peRatio: number;\n}\n\n// --- NewsAPI Configuration ---\nconst NEWSAPI_KEY = process.env.NEWSAPI_KEY;\nconst NEWSAPI_ENDPOINT = 'https://newsapi.org/v2/everything';\n\nif (!NEWSAPI_KEY) {\n    console.warn(\"NEWSAPI_KEY environment variable not set. News fetching will be disabled.\");\n    // Set a flag to indicate the API key is missing, used in NewsDisplay component\n    process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'true';\n} else {\n     process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'false';\n}\n\n\n// --- Stock Data (Yahoo Finance) ---\n\n/**\n * Asynchronously retrieves real-time stock data for a given stock symbol using Yahoo Finance.\n * @param symbol The stock symbol to retrieve data for.\n * @returns A promise that resolves to a StockData object containing real-time stock information.\n * @throws Will throw an error if the API call fails or the symbol is invalid.\n */\nexport async function getStockData(symbol: string): Promise<StockData> {\n    try {\n        const quote = await yahooFinance.quote(symbol);\n\n        if (!quote || !quote.regularMarketPrice) {\n            throw new Error(`No valid quote data found for symbol: ${symbol}`);\n        }\n\n        const data: StockData = {\n            symbol: quote.symbol,\n            price: quote.regularMarketPrice,\n            dailyHigh: quote.regularMarketDayHigh ?? quote.regularMarketPrice, // Fallback to current price if high is missing\n            dailyLow: quote.regularMarketDayLow ?? quote.regularMarketPrice,   // Fallback to current price if low is missing\n            companyName: quote.longName || quote.shortName || `${symbol} Name N/A`, // Use longName, fallback to shortName or symbol\n        };\n        return data;\n    } catch (error: any) {\n        console.error(`Error fetching stock data for ${symbol} from Yahoo Finance:`, error.message);\n        // Re-throw a more specific error or handle as needed\n        if (error.message.includes('404 Not Found')) {\n             throw new Error(`Invalid stock symbol or data unavailable: ${symbol}`);\n        }\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n/**\n * Asynchronously retrieves stock data for multiple symbols using Yahoo Finance.\n * @param symbols An array of stock symbols.\n * @returns A promise that resolves to an array of StockData objects. Symbols with errors will be excluded.\n */\nexport async function getMultipleStockData(symbols: string[]): Promise<StockData[]> {\n  if (!symbols || symbols.length === 0) {\n    return [];\n  }\n  try {\n    const quotes = await yahooFinance.quote(symbols);\n    const results: StockData[] = [];\n\n    // Check if quotes is an array (multiple symbols) or an object (single symbol)\n    const quoteArray = Array.isArray(quotes) ? quotes : [quotes];\n\n    for (const quote of quoteArray) {\n        if (quote && quote.regularMarketPrice && quote.symbol) {\n             results.push({\n                symbol: quote.symbol,\n                price: quote.regularMarketPrice,\n                dailyHigh: quote.regularMarketDayHigh ?? quote.regularMarketPrice,\n                dailyLow: quote.regularMarketDayLow ?? quote.regularMarketPrice,\n                companyName: quote.longName || quote.shortName || `${quote.symbol} Name N/A`,\n            });\n        } else {\n             console.warn(`Skipping invalid quote data received for one of the symbols.`);\n        }\n    }\n    return results;\n  } catch (error: any) {\n    console.error(`Error fetching multiple stock data from Yahoo Finance:`, error.message);\n    // Return empty array or partial results if desired, for now return empty on error\n    return [];\n     // Or re-throw: throw new Error(`Failed to fetch multiple stock data. Reason: ${error.message}`);\n  }\n}\n\n\n// --- Company Performance (Yahoo Finance) ---\n\n/**\n * Asynchronously retrieves company performance metrics for a given stock symbol using Yahoo Finance.\n * Note: Revenue data might not be consistently available via free APIs.\n * @param symbol The stock symbol to retrieve metrics for.\n * @returns A promise that resolves to a CompanyPerformance object.\n * @throws Will throw an error if the API call fails or required data is missing.\n */\nexport async function getCompanyPerformance(symbol: string): Promise<CompanyPerformance> {\n    try {\n        // Fetch summary data which includes defaultKeyStatistics\n        const summary = await yahooFinance.quoteSummary(symbol, {\n             modules: [\"defaultKeyStatistics\", \"summaryDetail\", \"financialData\"] // Include necessary modules\n        });\n\n        if (!summary) {\n            throw new Error(`No summary data found for symbol: ${symbol}`);\n        }\n\n        const defaultKeyStatistics = summary.defaultKeyStatistics;\n        const summaryDetail = summary.summaryDetail;\n        const financialData = summary.financialData;\n\n        // P/E Ratio and EPS are often in summaryDetail or defaultKeyStatistics\n        const peRatio = summaryDetail?.trailingPE ?? defaultKeyStatistics?.trailingPE;\n        const eps = summaryDetail?.trailingEps ?? defaultKeyStatistics?.trailingEps;\n\n        // Revenue is typically in financialData\n        const revenue = financialData?.totalRevenue; // This might be null or undefined\n\n\n        // Validate required fields\n        if (eps === undefined || eps === null) {\n             // Allow missing EPS but log warning\n             console.warn(`EPS data is missing for symbol: ${symbol}.`);\n             // Consider setting a default or special value like NaN if needed downstream\n             // eps = NaN; // Or keep it as is (null/undefined) depending on consumer logic\n        }\n         if (peRatio === undefined || peRatio === null) {\n            // Allow missing P/E for some cases (e.g., negative earnings) but maybe provide a default or indicator\n            console.warn(`P/E ratio is missing for symbol: ${symbol}. Might be due to negative earnings.`);\n             // Consider setting a default or special value like NaN if needed downstream\n             // peRatio = NaN; // Or keep it as is (null/undefined) depending on consumer logic\n         }\n\n\n        const performance: CompanyPerformance = {\n            symbol: symbol, // Use the input symbol as it's not always returned in response parts\n            revenue: revenue, // Can be null/undefined\n            // Use NaN if EPS is missing/null/undefined for numerical consistency\n            eps: typeof eps === 'number' ? eps : NaN,\n             // Use NaN if PE is missing/null/undefined for numerical consistency\n            peRatio: typeof peRatio === 'number' ? peRatio : NaN,\n        };\n\n        return performance;\n    } catch (error: any) {\n        console.error(`Error fetching company performance for ${symbol} from Yahoo Finance:`, error.message);\n        if (error.message.includes('404 Not Found')) {\n             throw new Error(`Invalid stock symbol or data unavailable for performance: ${symbol}`);\n        }\n        throw new Error(`Failed to fetch company performance for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n\n// --- News Headlines (NewsAPI.org via Fetch) ---\n\n/**\n * Asynchronously retrieves recent news headlines related to a given stock symbol using NewsAPI.org via fetch.\n * Uses the company name associated with the symbol for better search results.\n * @param symbol The stock symbol to retrieve news for.\n * @returns A promise that resolves to an array of NewsHeadline objects.\n * @throws Will throw an error if the NewsAPI key is missing, the API call fails, or the symbol is invalid.\n */\nexport async function getNewsHeadlines(symbol: string): Promise<NewsHeadline[]> {\n    if (!NEWSAPI_KEY) {\n        console.error(\"NewsAPI key is missing. Cannot fetch news.\");\n        // Set flag indicating the service is disabled due to missing key\n        process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'true';\n        // Return empty or throw error based on desired handling\n        // throw new Error('NewsAPI key is missing.'); // Option: throw error\n        return []; // Option: return empty list\n    }\n     // Ensure flag is false if key exists\n     process.env.NEXT_PUBLIC_NEWSAPI_DISABLED = 'false';\n\n    try {\n        // 1. Get company name from stock data to improve news search relevance\n        let companyName = symbol; // Default to symbol if name fetch fails\n        let stockInfo: StockData | null = null;\n        try {\n            stockInfo = await getStockData(symbol); // Reuse existing function\n            // Use the first word of the company name or the full name if short\n            companyName = stockInfo.companyName.includes(' ') ? stockInfo.companyName.split(\" \")[0] : stockInfo.companyName;\n        } catch (nameError: any) {\n            console.warn(`Could not fetch company name for news search (${symbol}): ${nameError.message}. Using symbol instead.`);\n        }\n\n        // 2. Construct NewsAPI query parameters\n        const query = encodeURIComponent(`\"${companyName}\" OR ${symbol}`); // Search for exact company name or symbol\n        const url = `${NEWSAPI_ENDPOINT}?q=${query}&language=en&sortBy=relevancy&pageSize=10&apiKey=${NEWSAPI_KEY}`;\n\n        console.log(`Fetching news from NewsAPI URL: ${NEWSAPI_ENDPOINT}?q=${query}&...`);\n\n        // 3. Make the request using fetch\n        const response = await fetch(url, {\n            method: 'GET',\n             // Add cache control if needed, e.g., revalidate every 15 minutes\n            next: { revalidate: 900 }\n            // No headers needed for basic key auth with NewsAPI via query param\n        });\n\n        if (!response.ok) {\n            // Attempt to parse error response from NewsAPI\n            let errorBody = null;\n            try {\n                errorBody = await response.json();\n            } catch (e) { /* Ignore parsing error */ }\n\n            const statusText = errorBody?.message || response.statusText;\n            const errorCode = errorBody?.code;\n\n             // Specific error handling based on NewsAPI codes\n             if (errorCode === 'apiKeyInvalid' || errorCode === 'apiKeyMissing') {\n                 throw new Error('Invalid or missing NewsAPI key.');\n             }\n             if (errorCode === 'rateLimited') {\n                 throw new Error('NewsAPI rate limit exceeded.');\n             }\n\n             throw new Error(`NewsAPI request failed: ${response.status} ${statusText}`);\n        }\n\n        const data = await response.json();\n\n        if (!data.articles || data.articles.length === 0) {\n            console.warn(`No news headlines found via NewsAPI for query: ${companyName} OR ${symbol}`);\n            return [];\n        }\n\n        // 4. Map NewsAPI articles to our NewsHeadline interface\n        const headlines: NewsHeadline[] = data.articles.map((article: any) => ({ // Use 'any' for external API structure flexibility\n            title: article.title || 'No Title',\n            url: article.url || '#',\n            source: article.source?.name || 'Unknown Source',\n            publishedAt: article.publishedAt || new Date().toISOString(), // Fallback to current time if missing\n        }));\n\n         // Optional: Sort by date descending if needed (sortBy=relevancy might not guarantee chronological order)\n         // headlines.sort((a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime());\n\n        return headlines;\n\n    } catch (error: any) {\n        console.error(`Error fetching news headlines for ${symbol} via NewsAPI fetch:`, error.message);\n        // Re-throw specific or generic error\n        // Let specific errors (like invalid key, rate limit) bubble up\n        if (error.message.includes('Invalid or missing NewsAPI key') || error.message.includes('NewsAPI rate limit exceeded')) {\n            throw error; // Re-throw specific known errors\n        }\n        // Throw a generic error for other fetch/network issues\n        throw new Error(`Failed to fetch news headlines for ${symbol}. Reason: ${error.message}`);\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;;;IA0GsB;IA+BA;IA2CA;IAmEA","debugId":null}},
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/skeleton.tsx"],"sourcesContent":["import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,SAAS,SAAS,EAChB,SAAS,EACT,GAAG,OACkC;IACrC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC;QAClD,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/stock-data-display.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport type { StockData, CompanyPerformance } from '@/services/stock-data';\nimport { getStockData, getCompanyPerformance } from '@/services/stock-data';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { TrendingUp, TrendingDown, Minus, Building, BarChartBig, Percent, AlertTriangle } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Import cn\n\ninterface StockDataDisplayProps {\n  symbol: string;\n}\n\nexport function StockDataDisplay({ symbol }: StockDataDisplayProps) {\n  const [stockData, setStockData] = useState<StockData | null>(null);\n  const [companyPerformance, setCompanyPerformance] = useState<CompanyPerformance | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [previousPrice, setPreviousPrice] = useState<number | undefined>(undefined); // State to hold previous price for trend icon\n\n  useEffect(() => {\n    let isMounted = true; // Flag to prevent state updates on unmounted component\n\n    async function fetchData() {\n      if (!symbol) {\n        setStockData(null);\n        setCompanyPerformance(null);\n        setLoading(false);\n        setError(null);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n\n      // Preserve previous price before fetching new data\n      setPreviousPrice(prev => stockData?.price ?? prev); // Keep existing price if stockData is null\n\n      try {\n        const [stock, performance] = await Promise.all([\n          getStockData(symbol).catch(e => { console.error(`Error fetching stock data for ${symbol}:`, e.message); return null; }), // Catch individual errors\n          getCompanyPerformance(symbol).catch(e => { console.error(`Error fetching performance data for ${symbol}:`, e.message); return null; }),\n        ]);\n\n         if (!isMounted) return; // Don't update state if component unmounted\n\n        if (stock === null) {\n             // Keep previous data if stock fetch fails, but show error?\n             // Or clear data and show error? Let's clear and show error.\n             setStockData(null);\n             setCompanyPerformance(null);\n             throw new Error(`Failed to fetch stock data for ${symbol}.`);\n        }\n\n         // Performance data might be unavailable for some symbols or APIs, handle gracefully\n         if (performance === null) {\n            console.warn(`Performance data unavailable for ${symbol}.`);\n         }\n\n        setStockData(stock);\n        setCompanyPerformance(performance); // Can be null\n\n      } catch (err: any) {\n         if (!isMounted) return;\n        console.error(\"Error fetching stock details:\", err.message);\n        setError(err.message || 'Failed to fetch stock details. Please check the symbol or try again.');\n        setStockData(null); // Clear data on error\n        setCompanyPerformance(null);\n         setPreviousPrice(undefined); // Clear previous price on error too\n      } finally {\n         if (isMounted) {\n           setLoading(false);\n         }\n      }\n    }\n\n    fetchData();\n\n    // Set up an interval to refresh data periodically\n    const intervalId = setInterval(fetchData, 15000); // Refresh every 15 seconds\n\n    // Cleanup function\n    return () => {\n        isMounted = false; // Set flag on unmount\n        clearInterval(intervalId);\n        // Don't reset previous price here, do it on symbol change or error\n    };\n  }, [symbol]); // Re-run effect when symbol changes\n\n\n  // Use specific color classes for icons\n  const getPriceChangeIcon = (currentPrice: number | undefined, prevPrice: number | undefined) => {\n    if (currentPrice === undefined || prevPrice === undefined) return <Minus className=\"h-5 w-5 text-muted-foreground\" />; // Show neutral if data is missing\n    if (currentPrice > prevPrice) return <TrendingUp className=\"h-5 w-5 text-success\" />; // Use text-success (green)\n    if (currentPrice < prevPrice) return <TrendingDown className=\"h-5 w-5 text-destructive\" />; // Use text-destructive (red)\n    return <Minus className=\"h-5 w-5 text-muted-foreground\" />; // Prices are equal\n  };\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <Skeleton className=\"h-6 w-3/4\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Skeleton className=\"h-6 w-full\" />\n            <Skeleton className=\"h-6 w-full\" />\n            <Skeleton className=\"h-6 w-full\" />\n            <Skeleton className=\"h-6 w-full\" />\n            <Skeleton className=\"h-6 w-full\" />\n            <Skeleton className=\"h-6 w-full\" /> {/* Added skeleton for Revenue */}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error && !stockData) { // Only show full error card if no data is available at all\n    return (\n      <Card>\n        <CardHeader className=\"flex flex-row items-center space-x-2 text-destructive\">\n             <AlertTriangle className=\"h-5 w-5\" />\n             <CardTitle>Error Loading Data</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p>{error}</p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n    // Show placeholder/message if symbol is valid but no data could be fetched after loading\n    if (!stockData) {\n        return (\n          <Card>\n            <CardHeader>\n                <CardTitle>No Data Available</CardTitle>\n                 <CardDescription>Could not fetch data for {symbol}.</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>Please check the symbol or try again later. {error}</p>\n            </CardContent>\n          </Card>\n        );\n    }\n\n  // If there's data, render it, even if there was a temporary error on the last fetch\n  return (\n    <Card className=\"shadow-lg rounded-lg transition-all duration-300 hover:shadow-xl\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n            <div>\n                <CardTitle className=\"text-xl md:text-2xl font-bold text-primary flex items-center\">\n                    <Building className=\"mr-2 h-5 w-5 md:h-6 md:w-6\" /> {stockData.companyName} ({stockData.symbol})\n                </CardTitle>\n                <CardDescription>Real-time stock data and performance</CardDescription>\n             </div>\n             {/* Use state for previous price comparison */}\n             {getPriceChangeIcon(stockData?.price, previousPrice)}\n        </div>\n         {/* Show error inline if data exists but last fetch failed */}\n          {error && (\n              <p className=\"text-xs text-destructive mt-1\">Error refreshing data: {error}</p>\n          )}\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-3xl font-bold text-foreground\"> {/* Use foreground, icon shows trend */}\n          ${stockData.price?.toFixed(2) ?? 'N/A'}\n        </div>\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-3 text-sm\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">High:</span>\n            <span className=\"font-medium\">${stockData.dailyHigh?.toFixed(2) ?? 'N/A'}</span>\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-muted-foreground\">Low:</span>\n            <span className=\"font-medium\">${stockData.dailyLow?.toFixed(2) ?? 'N/A'}</span>\n          </div>\n\n           {/* Conditionally render performance metrics if available */}\n           {companyPerformance ? (\n            <>\n                <div className=\"flex items-center justify-between col-span-2 pt-2 border-t\">\n                    <span className=\"text-muted-foreground flex items-center\"><BarChartBig className=\"mr-1 h-4 w-4\" /> Revenue (TTM):</span>\n                    <span className=\"font-medium\">\n                        {companyPerformance.revenue ? `$${companyPerformance.revenue.toLocaleString()}` : 'N/A'}\n                    </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">EPS (TTM):</span>\n                     {/* Check if EPS is a valid number before formatting */}\n                     <span className=\"font-medium\">\n                         {typeof companyPerformance.eps === 'number' ? `$${companyPerformance.eps.toFixed(2)}` : 'N/A'}\n                     </span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                    <span className=\"text-muted-foreground flex items-center\"><Percent className=\"mr-1 h-4 w-4\" /> P/E Ratio (TTM):</span>\n                     {/* Check if PE is a valid number before formatting */}\n                    <span className=\"font-medium\">\n                         {typeof companyPerformance.peRatio === 'number' && !isNaN(companyPerformance.peRatio)\n                           ? companyPerformance.peRatio.toFixed(2)\n                           : 'N/A'}\n                    </span>\n                </div>\n             </>\n            ) : (\n                 <div className=\"col-span-2 pt-2 border-t text-center text-muted-foreground text-xs\">\n                    Performance metrics currently unavailable.\n                 </div>\n            )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 865, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/recommend-stock.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Recommends stocks based on a chosen investment strategy and optional user risk profile, explaining the reasons. Uses real data from Yahoo Finance.\n *\n * - recommendStock - A function that recommends a stock based on a strategy and risk profile.\n * - RecommendStockInput - The input type for the recommendStock function.\n * - RecommendStockOutput - The return type for the recommendStock function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n// Import REAL data fetching functions and types\nimport {CompanyPerformance, getCompanyPerformance, getStockData, StockData} from '@/services/stock-data';\n\nconst RecommendStockInputSchema = z.object({\n  stockSymbol: z.string().describe('The stock symbol to evaluate (e.g., AAPL).'),\n  investmentStrategy: z.string().describe('The investment strategy to use (e.g., value investing, growth investing, income investing).'),\n  userRiskProfile: z.string().optional().describe('Optional user risk profile (e.g., low, medium, high, aggressive, moderate, conservative).'),\n});\nexport type RecommendStockInput = z.infer<typeof RecommendStockInputSchema>;\n\nconst RecommendStockOutputSchema = z.object({\n  recommendation: z.string().describe('The recommendation (e.g., Buy, Sell, Hold, Strong Buy, Strong Sell).'),\n  reasoning: z.string().describe('The reasoning behind the recommendation, based on the investment strategy, risk profile (if provided), and fetched data.'),\n  strategyScore: z.number().min(0).max(100).describe('A numerical score (0-100) indicating how well the stock fits the specified strategy.'),\n});\nexport type RecommendStockOutput = z.infer<typeof RecommendStockOutputSchema>;\n\nexport async function recommendStock(input: RecommendStockInput): Promise<RecommendStockOutput> {\n  return recommendStockFlow(input);\n}\n\n\n// Tool to get current stock data - USES REAL API\nconst getCurrentStockDataTool = ai.defineTool({\n  name: 'getCurrentStockDataForRecommendation',\n  description: 'Retrieves the latest price, daily high, daily low, and company name for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Matches the actual StockData interface\n  outputSchema: z.object({\n    symbol: z.string(),\n    price: z.number(),\n    dailyHigh: z.number(),\n    dailyLow: z.number(),\n    companyName: z.string(),\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Recommendation Tool: Fetching stock data for ${symbol}...`);\n        const data = await getStockData(symbol); // Call the real service function\n        console.log(`Recommendation Tool: Stock data received for ${symbol}.`);\n        return data;\n    } catch (error: any) {\n        console.error(`Recommendation Tool Error: Error fetching stock data for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch stock data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n// Tool to get company performance data - USES REAL API\nconst getCompanyPerformanceTool = ai.defineTool({\n  name: 'getCompanyPerformanceDataForRecommendation',\n  description: 'Retrieves key performance metrics like revenue (if available), EPS, and P/E ratio for a given stock symbol from Yahoo Finance.',\n  inputSchema: z.object({\n    symbol: z.string().describe('The stock symbol (e.g., AAPL).'),\n  }),\n  // Matches the actual CompanyPerformance interface\n  outputSchema: z.object({\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(), // Revenue is optional/nullable\n      eps: z.number(),\n      peRatio: z.number(), // Allow NaN\n  }),\n}, async ({ symbol }) => {\n    try {\n        console.log(`Recommendation Tool: Fetching company performance for ${symbol}...`);\n        const data = await getCompanyPerformance(symbol); // Call the real service function\n        console.log(`Recommendation Tool: Company performance received for ${symbol}.`);\n        return data;\n    } catch (error: any) {\n        console.error(`Recommendation Tool Error: Error fetching company performance for ${symbol}:`, error.message);\n        throw new Error(`Failed to fetch company performance data for ${symbol}. Reason: ${error.message}.`);\n    }\n});\n\n\n// Tool specifically for evaluating the stock against the strategy and profile using the REAL data\n// This tool's internal logic remains somewhat simplified for demonstration, but it now consumes real data structures.\nconst evaluateStockForStrategyTool = ai.defineTool({\n  name: 'evaluateStockForStrategy',\n  description: 'Evaluates how well a given stock aligns with a specific investment strategy and user risk profile, using provided real stock data and company performance metrics. Returns a recommendation, reasoning, and strategy fit score.',\n  inputSchema: z.object({\n    stockSymbol: z.string().describe('The stock symbol being evaluated.'),\n    investmentStrategy: z.string().describe('The investment strategy provided.'),\n    userRiskProfile: z.string().optional().describe('The user risk profile provided (if any).'),\n    stockData: z.object({ // Matches REAL StockData structure\n      symbol: z.string(),\n      price: z.number(),\n      dailyHigh: z.number(),\n      dailyLow: z.number(),\n      companyName: z.string(),\n    }).describe('Current stock data for the symbol from Yahoo Finance.'),\n    companyPerformance: z.object({ // Matches REAL CompanyPerformance structure\n      symbol: z.string(),\n      revenue: z.number().optional().nullable(),\n      eps: z.number(),\n      peRatio: z.number(), // Can be NaN\n    }).describe('Company performance metrics for the symbol from Yahoo Finance.'),\n  }),\n  outputSchema: z.object({ // Matches RecommendStockOutputSchema\n    recommendation: z.string().describe('The recommendation (e.g., Buy, Sell, Hold, Strong Buy, Strong Sell).'),\n    reasoning: z.string().describe('Detailed reasoning linking the data, strategy, and risk profile to the recommendation.'),\n    strategyScore: z.number().min(0).max(100).describe('A score (0-100) indicating alignment with the strategy.'),\n  }),\n}, async (input) => {\n  // --- Simplified evaluation logic using REAL data fields ---\n  let recommendation = 'Hold';\n  let reasoning = `Analyzing ${input.stockSymbol} (${input.stockData.companyName}) for a ${input.investmentStrategy} strategy`;\n   if (input.userRiskProfile) {\n       reasoning += ` with a ${input.userRiskProfile} risk profile. `;\n   } else {\n       reasoning += `. `;\n   }\n   // Format PE and EPS carefully, handling potential NaN/null\n   const peRatioFormatted = (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio)) ? input.companyPerformance.peRatio.toFixed(2) : 'N/A';\n   const epsFormatted = (typeof input.companyPerformance.eps === 'number') ? `$${input.companyPerformance.eps.toFixed(2)}` : 'N/A';\n   const revenueFormatted = (typeof input.companyPerformance.revenue === 'number') ? `$${input.companyPerformance.revenue.toLocaleString()}` : 'N/A';\n\n   reasoning += `Current Price: $${input.stockData.price.toFixed(2)}, P/E Ratio: ${peRatioFormatted}, EPS: ${epsFormatted}, Revenue: ${revenueFormatted}. `;\n\n  let score = 50; // Start neutral\n\n  // Simple logic based on strategy (using real data fields)\n  // Note: P/E might be NaN\n  if (input.investmentStrategy === 'value_investing') {\n    if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio < 18) {\n      recommendation = 'Buy';\n      reasoning += 'The P/E ratio is relatively low, suggesting potential value. ';\n      score += 25;\n    } else if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio > 30) {\n      recommendation = 'Sell';\n      reasoning += 'The P/E ratio seems high for a value strategy. ';\n      score -= 15;\n    } else if (isNaN(input.companyPerformance.peRatio)) {\n         reasoning += 'P/E ratio is not available (possibly negative earnings), making value assessment difficult based on P/E alone. ';\n         score -= 5; // Slightly penalize lack of PE for value strategy\n    } else {\n        reasoning += 'The valuation based on P/E seems moderate. ';\n    }\n  } else if (input.investmentStrategy === 'growth_investing') {\n     // Check for positive EPS and potentially revenue growth (revenue is optional)\n    if (typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps > 1.5) { // Example threshold for positive EPS\n      recommendation = 'Buy';\n      reasoning += 'Positive EPS indicates profitability. ';\n      score += 20;\n       // Add bonus points if revenue is high (example)\n       if (typeof input.companyPerformance.revenue === 'number' && input.companyPerformance.revenue > 10e9) {\n            reasoning += 'Significant revenue suggests strong market presence. ';\n           score += 15;\n       }\n    } else if (typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps <= 0) {\n        recommendation = 'Hold';\n        reasoning += 'Negative or zero EPS is a concern for growth. ';\n        score -= 10;\n    } else {\n        reasoning += 'Growth indicators based on available data are average. ';\n    }\n  } else if (input.investmentStrategy === 'income_investing') {\n      // This would typically involve checking dividend yield, which isn't in our current data.\n      reasoning += `Income strategy analysis requires dividend data not currently available. Evaluating based on general stability. `;\n      // Penalize score slightly due to lack of relevant data\n      score -= 10;\n      // Example: Favor companies with moderate PE and positive EPS for stability\n      if (typeof input.companyPerformance.peRatio === 'number' && !isNaN(input.companyPerformance.peRatio) && input.companyPerformance.peRatio < 25 && input.companyPerformance.peRatio > 10 &&\n          typeof input.companyPerformance.eps === 'number' && input.companyPerformance.eps > 0) {\n          reasoning += 'Seems relatively stable based on P/E and EPS. ';\n          recommendation = 'Hold'; // Cautious Hold for income without dividend info\n          score += 15;\n      }\n  }\n   else {\n      reasoning += `Standard analysis applied for ${input.investmentStrategy}. `;\n      score += (Math.random() - 0.5) * 10; // Add minor randomness\n  }\n\n  // Adjust based on risk profile (example)\n  if (input.userRiskProfile) {\n      if ((input.userRiskProfile.toLowerCase() === 'low' || input.userRiskProfile.toLowerCase() === 'conservative') && score > 60 && recommendation.includes('Buy')) {\n           reasoning += `Considering the conservative profile, a 'Hold' might be safer despite positive indicators. `;\n           recommendation = 'Hold';\n           score -= 10;\n      }\n       if ((input.userRiskProfile.toLowerCase() === 'high' || input.userRiskProfile.toLowerCase() === 'aggressive') && score > 70 && recommendation === 'Buy') {\n            reasoning += `Given the aggressive profile, this looks like a strong opportunity. `;\n            recommendation = 'Strong Buy';\n            score += 5;\n       }\n        if ((input.userRiskProfile.toLowerCase() === 'high' || input.userRiskProfile.toLowerCase() === 'aggressive') && score < 40 && recommendation === 'Sell') {\n            reasoning += `Given the aggressive profile, selling might be premature unless fundamentals are very weak. Consider holding. `;\n            recommendation = 'Hold'; // Less likely to sell on moderate weakness\n            score += 5; // Slight score increase for holding potential upside\n       }\n  }\n\n\n  score = Math.max(0, Math.min(100, Math.round(score))); // Clamp score between 0 and 100\n\n  return {\n    recommendation: recommendation,\n    reasoning: reasoning.trim(),\n    strategyScore: score,\n  };\n});\n\n\nconst recommendStockPrompt = ai.definePrompt({\n  name: 'recommendStockPrompt',\n  tools: [getCurrentStockDataTool, getCompanyPerformanceTool, evaluateStockForStrategyTool], // Include all necessary tools\n  input: {\n    schema: z.object({\n      stockSymbol: z.string().describe('The stock symbol to evaluate (e.g., AAPL).'),\n      investmentStrategy: z.string().describe('The investment strategy to use (e.g., value investing, growth investing).'),\n      userRiskProfile: z.string().optional().describe('Optional user risk profile (e.g., aggressive, moderate, conservative).'),\n      // Data is fetched by tools within the flow\n    }),\n  },\n  output: {\n    schema: RecommendStockOutputSchema, // Matches the flow's output\n  },\n  // The prompt guides the LLM on how to use the tools.\n  prompt: `\n    You need to provide a stock recommendation for {{{stockSymbol}}}.\n    The user's desired investment strategy is {{{investmentStrategy}}}.\n    {{#if userRiskProfile}}The user's risk profile is {{{userRiskProfile}}}.{{/if}}\n\n    Instructions:\n    1.  First, use the 'getCurrentStockDataForRecommendation' tool to get the latest stock price data for {{{stockSymbol}}}. Handle potential errors (e.g., invalid symbol) gracefully by noting the failure.\n    2.  Then, use the 'getCompanyPerformanceDataForRecommendation' tool to get the latest company performance metrics (Revenue, EPS, P/E) for {{{stockSymbol}}}. Handle potential errors gracefully.\n    3.  If EITHER data fetching step (1 or 2) fails, DO NOT proceed to step 4. Instead, return a 'Hold' recommendation with reasoning explaining that necessary data could not be fetched, and assign a strategyScore of 0.\n    4.  If both data fetching steps were successful, use the 'evaluateStockForStrategy' tool. Pass the fetched stock data, company performance data, the stock symbol ('{{{stockSymbol}}}'), the investment strategy ('{{{investmentStrategy}}}'), and the user risk profile ('{{{userRiskProfile}}}' if provided, otherwise pass nothing/null for risk profile) to this tool.\n    5.  Return the exact output provided by the 'evaluateStockForStrategy' tool. Do not add any other text or explanation. Make sure the output strictly follows the required JSON schema (recommendation, reasoning, strategyScore).\n    `,\n});\n\n\nconst recommendStockFlow = ai.defineFlow<\n  typeof RecommendStockInputSchema,\n  typeof RecommendStockOutputSchema\n>({\n  name: 'recommendStockFlow',\n  inputSchema: RecommendStockInputSchema,\n  outputSchema: RecommendStockOutputSchema,\n}, async (input) => {\n    console.log(\"Recommend Stock Flow Input:\", input);\n\n    // The prompt now orchestrates the tool calls. Genkit will handle fetching\n    // data using the tools based on the prompt instructions before potentially calling\n    // the evaluation tool. It also handles the error case where data fetching fails.\n\n    const { output } = await recommendStockPrompt(input);\n\n    if (!output) {\n        console.error(\"Recommend Stock Flow: No output received from the prompt execution.\");\n        // This might happen if the prompt itself errors or if the LLM fails to generate valid JSON according to the schema\n        // after potentially hitting the error path in the prompt logic (data fetch failure).\n        // Return a generic error state or re-throw.\n         return {\n            recommendation: 'Error',\n            reasoning: 'Failed to generate recommendation due to an internal error or inability to fetch required data.',\n            strategyScore: 0,\n         };\n        // Or: throw new Error(\"Recommendation generation failed to produce an output.\");\n    }\n\n     console.log(\"Recommend Stock Flow Output:\", output);\n\n     // Basic validation (already somewhat enforced by Zod output schema in prompt)\n     if (!output.recommendation || !output.reasoning || output.strategyScore === undefined || typeof output.strategyScore !== 'number') {\n        console.error(\"Recommend Stock Flow: Output is missing required fields or has incorrect types.\");\n         // Even if the LLM produced *something*, if it doesn't match the schema, return an error state.\n         return {\n            recommendation: 'Error',\n            reasoning: 'Generated recommendation has an invalid format.',\n            strategyScore: 0,\n         };\n        // Or: throw new Error(\"Generated recommendation is incomplete or has wrong types.\");\n     }\n\n\n    return output;\n});\n"],"names":[],"mappings":";;;;;IA6BsB","debugId":null}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\", // Purple background, white text\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\", // Red background\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\", // Transparent bg, border, gold hover bg/text\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\", // Light gray bg, dark text\n        ghost: \"hover:bg-accent hover:text-accent-foreground\", // Transparent bg, gold hover bg/text\n        link: \"text-primary underline-offset-4 hover:underline\", // Purple text, underlined on hover\n        accent: \"bg-accent text-accent-foreground hover:bg-accent/90\", // Gold background, dark text\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\", // Default to primary (purple)\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AAEA;;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,4VACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;YACN,QAAQ;QACV;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC5B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 938, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 970, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1162, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/alert.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAEA;;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,6JACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;QACJ;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAO,EAAE,oBACnC,8OAAC;QACC,KAAK;QACL,MAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QACzC,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG;AAEpB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,gDAAgD;QAC7D,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,iCAAmB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGtC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,iBAAiB,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1226, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/stock-recommendation.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { recommendStock, RecommendStockInput, RecommendStockOutput } from '@/ai/flows/recommend-stock';\nimport type { GenerateInvestmentPersonaOutput } from '@/ai/flows/generate-investment-persona'; // Import persona type\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Lightbulb, TrendingUp, AlertTriangle, BarChartHorizontalBig } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Import cn\n\ninterface StockRecommendationProps {\n  symbol: string;\n  userPersona: GenerateInvestmentPersonaOutput | null; // Accept optional persona\n}\n\nconst investmentStrategies = [\n  { value: 'value_investing', label: 'Value Investing' },\n  { value: 'growth_investing', label: 'Growth Investing' },\n  { value: 'income_investing', label: 'Income Investing' },\n  { value: 'momentum_investing', label: 'Momentum Investing' },\n  // Add more relevant strategies if needed\n];\n\nexport function StockRecommendation({ symbol, userPersona }: StockRecommendationProps) {\n  const [recommendation, setRecommendation] = useState<RecommendStockOutput | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedStrategy, setSelectedStrategy] = useState<string>(investmentStrategies[0].value);\n\n  // Reset recommendation when symbol changes\n  useEffect(() => {\n    setRecommendation(null);\n    setError(null);\n    // Optionally set default strategy based on persona when symbol changes\n    if (userPersona?.investmentStyle) {\n        const matchingStrategy = investmentStrategies.find(s => s.label.toLowerCase().includes(userPersona.investmentStyle.toLowerCase()));\n        if (matchingStrategy) {\n            setSelectedStrategy(matchingStrategy.value);\n        } else {\n             setSelectedStrategy(investmentStrategies[0].value); // Default if no match\n        }\n    } else {\n         setSelectedStrategy(investmentStrategies[0].value); // Default if no persona\n    }\n\n  }, [symbol, userPersona]); // Add userPersona as dependency\n\n  const handleGetRecommendation = async () => {\n    if (!symbol) {\n      setError(\"Please ensure a stock symbol is entered.\");\n      return;\n    }\n     if (!selectedStrategy) {\n        setError(\"Please select an investment strategy.\");\n        return;\n    }\n    setLoading(true);\n    setError(null);\n    setRecommendation(null);\n\n    const input: RecommendStockInput = {\n      stockSymbol: symbol,\n      investmentStrategy: selectedStrategy,\n      // Pass user risk profile from persona if available\n      userRiskProfile: userPersona?.riskAppetite,\n    };\n\n    try {\n      const result = await recommendStock(input);\n      setRecommendation(result);\n    } catch (err) {\n      console.error(\"Error getting recommendation:\", err);\n       const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';\n      setError(`Failed to get recommendation: ${errorMessage}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Use specific classes for recommendation colors\n  const getRecommendationColorClass = (rec: string | undefined): string => {\n    if (!rec) return 'text-muted-foreground';\n    const lowerRec = rec.toLowerCase();\n    if (lowerRec.includes('buy')) return 'text-success'; // Green for Buy/Strong Buy\n    if (lowerRec.includes('sell')) return 'text-destructive'; // Red for Sell/Strong Sell\n    if (lowerRec === 'hold') return 'text-primary'; // Use primary color for Hold\n    return 'text-muted-foreground'; // Default\n  };\n\n   const renderLoadingState = () => (\n     <div className=\"space-y-4 pt-4 border-t mt-4\">\n       <div className=\"flex items-center justify-between\">\n         <Skeleton className=\"h-6 w-1/3\" />\n         <Skeleton className=\"h-6 w-1/4\" />\n       </div>\n       <div>\n         <Skeleton className=\"h-4 w-1/4 mb-2\" />\n         <Skeleton className=\"h-2.5 w-full\" />\n          <Skeleton className=\"h-4 w-1/5 mt-1 ml-auto\" />\n       </div>\n       <div>\n         <Skeleton className=\"h-4 w-1/4 mb-2\" />\n         <Skeleton className=\"h-16 w-full\" />\n       </div>\n     </div>\n   );\n\n\n  return (\n    <Card className=\"shadow-lg rounded-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n           <Lightbulb className=\"mr-2 h-5 w-5\" /> Manual Stock Recommendation\n        </CardTitle>\n        <CardDescription>Get an AI recommendation for the selected stock based on a chosen strategy{userPersona ? ' and your profile' : ''}.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"investment-strategy\">Investment Strategy</Label>\n          <Select value={selectedStrategy} onValueChange={setSelectedStrategy} disabled={loading}>\n            <SelectTrigger id=\"investment-strategy\">\n              <SelectValue placeholder=\"Select a strategy\" />\n            </SelectTrigger>\n            <SelectContent>\n              {investmentStrategies.map((strategy) => (\n                <SelectItem key={strategy.value} value={strategy.value}>\n                  {strategy.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n           {userPersona?.investmentStyle && (\n               <p className=\"text-xs text-muted-foreground mt-1\">\n                   Default strategy based on your persona: {userPersona.investmentStyle}\n               </p>\n           )}\n        </div>\n\n        {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n        )}\n\n        {loading && renderLoadingState()}\n\n\n        {recommendation && !loading && (\n          <div className=\"space-y-4 pt-4 border-t mt-4\">\n             <div className=\"flex items-center justify-between\">\n                 <h3 className=\"text-lg font-semibold\">Recommendation:</h3>\n                 {/* Apply specific color class and bold for strong recommendations */}\n                 <span className={cn(\n                    \"text-xl font-bold\",\n                    getRecommendationColorClass(recommendation.recommendation),\n                    (recommendation.recommendation.toLowerCase().includes('strong')) && 'font-extrabold' // Example: extra bold for \"strong\"\n                 )}>\n                    {recommendation.recommendation}\n                </span>\n             </div>\n\n             <div>\n                <h4 className=\"font-semibold flex items-center\"><BarChartHorizontalBig className=\"mr-2 h-4 w-4\" /> Strategy Score:</h4>\n                {/* Use accent color for the progress bar */}\n                <div className=\"w-full bg-secondary rounded-full h-2.5 mt-1 relative overflow-hidden\">\n                  <div\n                    className=\"bg-accent h-2.5 rounded-full transition-all duration-500 ease-out\"\n                    style={{ width: `${recommendation.strategyScore}%` }}\n                  />\n                </div>\n                <p className=\"text-sm text-right mt-1 text-muted-foreground\">{recommendation.strategyScore}/100 Fit</p>\n             </div>\n\n            <div>\n              <h4 className=\"font-semibold\">Reasoning:</h4>\n              <p className=\"text-sm text-muted-foreground bg-secondary p-3 rounded-md\">{recommendation.reasoning}</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter>\n         {/* Use accent color for the button */}\n        <Button onClick={handleGetRecommendation} disabled={loading || !symbol || !selectedStrategy} className=\"w-full bg-accent hover:bg-accent/90 text-accent-foreground\">\n          {loading ? 'Analyzing...' : 'Get AI Recommendation'}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1703, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/table.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;YAC9C,GAAG,KAAK;;;;;;;;;;;AAIf,MAAM,WAAW,GAAG;AAEpB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAM,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,mBAAmB;QAAa,GAAG,KAAK;;;;;;AAEzE,YAAY,WAAW,GAAG;AAE1B,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2DACA;QAED,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG;AAE1B,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG9B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,+EACA;QAED,GAAG,KAAK;;;;;;AAGb,SAAS,WAAW,GAAG;AAEvB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,oGACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,kDAAkD;QAC/D,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGlC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,sCAAsC;QACnD,GAAG,KAAK;;;;;;AAGb,aAAa,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 1813, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/scroll-area.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AAEA;AALA;;;;;AAOA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;0BAET,8OAAC,0KAAA,CAAA,WAA4B;gBAAC,WAAU;0BACrC;;;;;;0BAEH,8OAAC;;;;;0BACD,8OAAC,0KAAA,CAAA,SAA0B;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,cAAc,UAAU,EAAE,GAAG,OAAO,EAAE,oBACpD,8OAAC,0KAAA,CAAA,sBAAuC;QACtC,KAAK;QACL,aAAa;QACb,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,iDACA,gBAAgB,cACd,sDACF,gBAAgB,gBACd,wDACF;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,kBAAmC;YAAC,WAAU;;;;;;;;;;;AAGnD,UAAU,WAAW,GAAG,0KAAA,CAAA,sBAAuC,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 1881, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/portfolio-tracker.tsx"],"sourcesContent":["import type { PortfolioItem } from '@/types';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { TrendingUp, TrendingDown, Minus, Package } from 'lucide-react';\nimport { cn } from '@/lib/utils'; // Import cn\n\ninterface PortfolioTrackerProps {\n  portfolio: PortfolioItem[];\n  virtualBalance: number; // Include virtual balance for total value calculation\n}\n\nexport function PortfolioTracker({ portfolio, virtualBalance }: PortfolioTrackerProps) {\n\n  const calculateTotalPortfolioValue = () => {\n    return portfolio.reduce((total, item) => total + item.quantity * item.currentPrice, 0);\n  };\n\n  const calculateTotalValue = () => {\n    return virtualBalance + calculateTotalPortfolioValue();\n  };\n\n  const calculateGainLoss = (item: PortfolioItem) => {\n    return (item.currentPrice - item.purchasePrice) * item.quantity;\n  };\n\n  const calculateTotalGainLoss = () => {\n     return portfolio.reduce((total, item) => total + calculateGainLoss(item), 0);\n  };\n\n  // Use specific classes for gain/loss colors\n  const getGainLossColorClass = (value: number): string => {\n    if (value > 0) return 'text-success'; // Green (using custom class from globals.css)\n    if (value < 0) return 'text-destructive'; // Red\n    return 'text-muted-foreground';\n  };\n\n   const getGainLossIcon = (value: number) => {\n     const colorClass = getGainLossColorClass(value);\n     if (value > 0) return <TrendingUp className={cn(\"h-4 w-4 ml-1 inline-block\", colorClass)} />;\n     if (value < 0) return <TrendingDown className={cn(\"h-4 w-4 ml-1 inline-block\", colorClass)} />;\n     return <Minus className={cn(\"h-4 w-4 ml-1 inline-block\", colorClass)} />;\n   };\n\n   const totalPortfolioValue = calculateTotalPortfolioValue();\n   const totalValue = calculateTotalValue();\n   const totalGainLoss = calculateTotalGainLoss();\n\n\n  return (\n    <Card className=\"shadow-lg rounded-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n            <Package className=\"mr-2 h-5 w-5\" /> Simulated Portfolio\n        </CardTitle>\n        <CardDescription>Track your virtual investments.</CardDescription>\n         <div className=\"pt-4 flex flex-wrap justify-between items-center text-sm border-t mt-2 gap-y-2 gap-x-4\"> {/* Allow wrapping */}\n            <div className=\"flex-shrink-0\">\n                <span className=\"text-muted-foreground\">Portfolio Value: </span>\n                <span className=\"font-bold\">\n                    ${totalPortfolioValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                </span>\n            </div>\n             <div className=\"flex-shrink-0\">\n                <span className=\"text-muted-foreground\">Total Gain/Loss: </span>\n                <span className={cn(\"font-bold\", getGainLossColorClass(totalGainLoss))}>\n                    ${totalGainLoss.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                    {getGainLossIcon(totalGainLoss)}\n                </span>\n            </div>\n             <div className=\"flex-shrink-0\">\n                <span className=\"text-muted-foreground\">Account Value: </span>\n                <span className=\"font-bold\">\n                    ${totalValue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n                </span>\n            </div>\n         </div>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[300px] w-full\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Symbol</TableHead>\n                <TableHead>Company</TableHead>\n                <TableHead className=\"text-right\">Quantity</TableHead>\n                <TableHead className=\"text-right\">Avg. Cost</TableHead>\n                <TableHead className=\"text-right\">Current Price</TableHead>\n                <TableHead className=\"text-right\">Total Value</TableHead>\n                <TableHead className=\"text-right\">Gain/Loss</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {portfolio.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={7} className=\"text-center text-muted-foreground h-24\">\n                    Your portfolio is empty. Make your first trade!\n                  </TableCell>\n                </TableRow>\n              ) : (\n                portfolio.map((item) => {\n                  const totalValue = item.quantity * item.currentPrice;\n                  const gainLoss = calculateGainLoss(item);\n                  const gainLossColorClass = getGainLossColorClass(gainLoss);\n                  return (\n                    <TableRow key={item.symbol} className=\"hover:bg-secondary/50 transition-colors\">\n                      <TableCell className=\"font-medium\">{item.symbol}</TableCell>\n                      <TableCell className=\"truncate max-w-[150px]\">{item.companyName}</TableCell>\n                      <TableCell className=\"text-right\">{item.quantity}</TableCell>\n                      <TableCell className=\"text-right\">${item.purchasePrice.toFixed(2)}</TableCell>\n                      <TableCell className=\"text-right\">${item.currentPrice.toFixed(2)}</TableCell>\n                      <TableCell className=\"text-right\">${totalValue.toFixed(2)}</TableCell>\n                      <TableCell className={cn(\"text-right font-medium\", gainLossColorClass)}>\n                        ${gainLoss.toFixed(2)}\n                         {getGainLossIcon(gainLoss)}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2289, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC3B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kYACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2318, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/radio-group.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n"],"names":[],"mappings":";;;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;QAC3B,GAAG,KAAK;QACT,KAAK;;;;;;AAGX;AACA,WAAW,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW;AAE7D,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGpC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IAC1B,qBACE,8OAAC,0KAAA,CAAA,OAAwB;QACvB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4OACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,0KAAA,CAAA,YAA6B;YAAC,WAAU;sBACvC,cAAA,8OAAC,sMAAA,CAAA,SAAM;gBAAC,WAAU;;;;;;;;;;;;;;;;AAI1B;AACA,eAAe,WAAW,GAAG,0KAAA,CAAA,OAAwB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 2378, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/trade-simulator.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react'; // Import useEffect\nimport type { PortfolioItem } from '@/types';\nimport type { StockData } from '@/services/stock-data';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { useToast } from \"@/hooks/use-toast\"\nimport { ShoppingCart, MinusCircle, PlusCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n\ninterface TradeSimulatorProps {\n  stockData: StockData | null;\n  portfolio: PortfolioItem[];\n  virtualBalance: number;\n  onTrade: (symbol: string, quantity: number, price: number, type: 'buy' | 'sell') => boolean; // Updated signature\n}\n\nexport function TradeSimulator({ stockData, portfolio, virtualBalance, onTrade }: TradeSimulatorProps) {\n  const [tradeType, setTradeType] = useState<'buy' | 'sell'>('buy');\n  const [quantity, setQuantity] = useState<number | string>('');\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n    // Effect to reset quantity and error when stockData changes (i.e., new stock selected)\n    useEffect(() => {\n        setQuantity('');\n        setError(null);\n        // Optionally reset tradeType to 'buy' as well\n        // setTradeType('buy');\n    }, [stockData?.symbol]); // Depend on the symbol within stockData\n\n  const handleQuantityChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    // Allow empty string or positive integers\n    if (value === '' || /^[1-9]\\d*$/.test(value)) {\n       setQuantity(value);\n       setError(null); // Clear error on valid input\n    } else if (value === '0') {\n        setError(\"Quantity must be greater than 0.\");\n        setQuantity(value);\n    } else {\n        setError(\"Please enter a valid positive number for quantity.\");\n         // Keep the last valid value or empty string\n    }\n  };\n\n  const handleTrade = () => {\n    setError(null); // Clear previous errors\n    if (!stockData) {\n      setError(\"No stock data available to trade.\");\n      return;\n    }\n\n    const numQuantity = Number(quantity);\n    if (isNaN(numQuantity) || numQuantity <= 0 || !Number.isInteger(numQuantity)) {\n      setError(\"Please enter a valid whole number quantity greater than 0.\");\n      return;\n    }\n\n    // onTrade now returns a boolean indicating success\n    const success = onTrade(stockData.symbol, numQuantity, stockData.price, tradeType);\n\n    if (success) {\n        toast({\n          title: \"Trade Executed\",\n          description: `${tradeType === 'buy' ? 'Bought' : 'Sold'} ${numQuantity} shares of ${stockData.symbol} at $${stockData.price.toFixed(2)}`,\n          variant: \"default\", // Or maybe a 'success' variant if defined\n        });\n       setQuantity(''); // Reset quantity only on successful trade\n    }\n    // If success is false, the `onTrade` function (in page.tsx) should have shown a specific error toast\n  };\n\n   const maxSellQuantity = portfolio.find(item => item.symbol === stockData?.symbol)?.quantity || 0;\n   const canTrade = stockData && quantity !== '' && Number(quantity) > 0 && !error;\n\n\n  return (\n    <Card className=\"shadow-lg rounded-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n            <ShoppingCart className=\"mr-2 h-5 w-5\" /> Manual Trade\n        </CardTitle>\n        <CardDescription>Buy or sell shares with your virtual currency.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <RadioGroup\n          defaultValue=\"buy\"\n          value={tradeType}\n          onValueChange={(value: 'buy' | 'sell') => setTradeType(value)}\n          className=\"grid grid-cols-2 gap-4\"\n        >\n          <div>\n            <RadioGroupItem value=\"buy\" id=\"buy\" className=\"peer sr-only\" />\n            <Label\n              htmlFor=\"buy\"\n              className={cn(\n                  \"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-secondary hover:text-secondary-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary\",\n                  \"cursor-pointer transition-colors\"\n              )}\n            >\n             {/* Use text-success for the buy icon */}\n             <PlusCircle className=\"mb-3 h-6 w-6 text-success\" />\n              Buy\n            </Label>\n          </div>\n          <div>\n            <RadioGroupItem value=\"sell\" id=\"sell\" className=\"peer sr-only\" />\n            <Label\n              htmlFor=\"sell\"\n              className={cn(\n                \"flex flex-col items-center justify-between rounded-md border-2 border-muted bg-popover p-4 hover:bg-secondary hover:text-secondary-foreground peer-data-[state=checked]:border-primary [&:has([data-state=checked])]:border-primary\",\n                 \"cursor-pointer transition-colors\"\n              )}\n            >\n               {/* Use text-destructive for the sell icon */}\n               <MinusCircle className=\"mb-3 h-6 w-6 text-destructive\" />\n              Sell\n            </Label>\n          </div>\n        </RadioGroup>\n\n        <div>\n          <Label htmlFor=\"quantity\">Quantity</Label>\n           <Input\n            id=\"quantity\"\n            type=\"number\" // Use number type but handle validation manually for better control\n            placeholder=\"Enter number of shares\"\n            value={quantity}\n            onChange={handleQuantityChange}\n            min=\"1\"\n            step=\"1\"\n            className={error ? 'border-destructive focus-visible:ring-destructive' : ''}\n            disabled={!stockData} // Disable if no stock is selected\n            />\n           {tradeType === 'sell' && stockData && (\n             <p className=\"text-xs text-muted-foreground mt-1\">\n               Available to sell: {maxSellQuantity} shares of {stockData.symbol}\n             </p>\n           )}\n        </div>\n\n        {stockData && quantity !== '' && Number(quantity) > 0 && !isNaN(Number(quantity)) && ( // Ensure quantity is a valid number\n          <div className=\"text-sm text-muted-foreground bg-secondary p-3 rounded-md\">\n            Estimated {tradeType === 'buy' ? 'Cost' : 'Proceeds'}:\n            <span className=\"font-medium text-foreground ml-1\">\n                ${(Number(quantity) * stockData.price).toFixed(2)}\n            </span>\n             {tradeType === 'buy' && Number(quantity) * stockData.price > virtualBalance && (\n                <span className=\"text-destructive ml-2\">(Insufficient Balance)</span>\n             )}\n             {tradeType === 'sell' && Number(quantity) > maxSellQuantity && (\n                 <span className=\"text-destructive ml-2\">(Insufficient Shares)</span>\n             )}\n          </div>\n        )}\n\n         {error && <p className=\"text-sm font-medium text-destructive\">{error}</p>}\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleTrade} disabled={!canTrade} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n          {tradeType === 'buy' ? 'Place Buy Order' : 'Place Sell Order'}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2704, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/ai/flows/generate-investment-persona.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates an investment persona based on user input.\n *\n * - generateInvestmentPersona - A function that generates the investment persona.\n * - GenerateInvestmentPersonaInput - The input type for the generateInvestmentPersona function.\n * - GenerateInvestmentPersonaOutput - The return type for the generateInvestmentPersona function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateInvestmentPersonaInputSchema = z.object({\n  userInput: z\n    .string()\n    .describe(\n      'A description of the users investment goals, risk appetite, and time horizon.'\n    ),\n});\nexport type GenerateInvestmentPersonaInput = z.infer<typeof GenerateInvestmentPersonaInputSchema>;\n\nconst GenerateInvestmentPersonaOutputSchema = z.object({\n  riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n  investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n  timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n  investmentAmount: z.string().describe('The users investment amount.'),\n  investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n});\nexport type GenerateInvestmentPersonaOutput = z.infer<typeof GenerateInvestmentPersonaOutputSchema>;\n\nexport async function generateInvestmentPersona(input: GenerateInvestmentPersonaInput): Promise<GenerateInvestmentPersonaOutput> {\n  return generateInvestmentPersonaFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateInvestmentPersonaPrompt',\n  input: {\n    schema: z.object({\n      userInput: z\n        .string()\n        .describe(\n          'A description of the users investment goals, risk appetite, and time horizon.'\n        ),\n    }),\n  },\n  output: {\n    schema: z.object({\n      riskAppetite: z.string().describe('The users risk appetite (e.g., low, medium, high).'),\n      investmentGoals: z.string().describe('The users investment goals (e.g., retirement, growth, income).'),\n      timeHorizon: z.string().describe('The users time horizon (e.g., short, medium, long).'),\n      investmentAmount: z.string().describe('The users investment amount.'),\n      investmentStyle: z.string().describe('The users investment style (e.g., value, growth, index).'),\n    }),\n  },\n  prompt: `You are an expert investment advisor. Please use the following information to generate an investment persona for the user.\n\nUser Input: {{{userInput}}}\n\nBased on the user input, please determine the following:\n\n*   riskAppetite: The users risk appetite (e.g., low, medium, high).\n*   investmentGoals: The users investment goals (e.g., retirement, growth, income).\n*   timeHorizon: The users time horizon (e.g., short, medium, long).\n*   investmentAmount: The users investment amount.\n*   investmentStyle: The users investment style (e.g., value, growth, index).\n\nPlease output the investment persona in JSON format.\n`,\n});\n\nconst generateInvestmentPersonaFlow = ai.defineFlow<\n  typeof GenerateInvestmentPersonaInputSchema,\n  typeof GenerateInvestmentPersonaOutputSchema\n>(\n  {\n    name: 'generateInvestmentPersonaFlow',\n    inputSchema: GenerateInvestmentPersonaInputSchema,\n    outputSchema: GenerateInvestmentPersonaOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;IA8BsB","debugId":null}},
    {"offset": {"line": 2716, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 2744, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/user-persona-input.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState } from 'react';\nimport {\n  generateInvestmentPersona,\n  GenerateInvestmentPersonaInput,\n  GenerateInvestmentPersonaOutput,\n} from '@/ai/flows/generate-investment-persona';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { User, Wand2, AlertTriangle } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\n\ninterface UserPersonaInputProps {\n  onPersonaGenerated: (persona: GenerateInvestmentPersonaOutput | null) => void;\n}\n\nexport function UserPersonaInput({ onPersonaGenerated }: UserPersonaInputProps) {\n  const [userInput, setUserInput] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const handleGeneratePersona = async () => {\n    if (!userInput.trim()) {\n      setError(\"Please describe your investment goals and preferences.\");\n      return;\n    }\n    setLoading(true);\n    setError(null);\n    onPersonaGenerated(null); // Clear previous persona\n\n    const input: GenerateInvestmentPersonaInput = {\n      userInput: userInput,\n    };\n\n    try {\n      const result = await generateInvestmentPersona(input);\n      onPersonaGenerated(result);\n       toast({\n        title: 'Persona Generated',\n        description: 'Your investment persona has been created.',\n      });\n    } catch (err) {\n      console.error(\"Error generating persona:\", err);\n       const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';\n       setError(`Failed to generate persona: ${errorMessage}`);\n       toast({\n         title: 'Error',\n         description: `Failed to generate persona: ${errorMessage}`,\n         variant: 'destructive',\n       });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"shadow-lg rounded-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n          <User className=\"mr-2 h-5 w-5\" /> Your Investment Profile\n        </CardTitle>\n        <CardDescription>\n          Describe your investment goals, risk tolerance, timeline, and any preferences (e.g., \"I want to save for retirement in 20 years, medium risk, interested in tech stocks\"). The AI will create a persona for you.\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"user-description\">Your Description</Label>\n          <Textarea\n            id=\"user-description\"\n            placeholder=\"e.g., Long-term growth, comfortable with moderate risk, focus on sustainable energy companies...\"\n            value={userInput}\n            onChange={(e) => setUserInput(e.target.value)}\n            rows={4}\n            className=\"mt-1 bg-background\"\n            disabled={loading}\n          />\n        </div>\n\n        {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n        )}\n\n      </CardContent>\n      <CardFooter>\n        <Button onClick={handleGeneratePersona} disabled={loading} className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\">\n          {loading ? (\n            'Generating Persona...'\n          ) : (\n            <>\n              <Wand2 className=\"mr-2 h-4 w-4\" /> Generate Persona\n            </>\n          )}\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n\n"],"names":[],"mappings":";;;;AAGA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAfA;;;;;;;;;;;AAsBO,SAAS,iBAAiB,EAAE,kBAAkB,EAAyB;IAC5E,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAC3C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,4HAAA,CAAA,WAAQ,AAAD;IAEzB,MAAM,wBAAwB;QAC5B,IAAI,CAAC,UAAU,IAAI,IAAI;YACrB,SAAS;YACT;QACF;QACA,WAAW;QACX,SAAS;QACT,mBAAmB,OAAO,yBAAyB;QAEnD,MAAM,QAAwC;YAC5C,WAAW;QACb;QAEA,IAAI;YACF,MAAM,SAAS,MAAM,CAAA,GAAA,uJAAA,CAAA,4BAAyB,AAAD,EAAE;YAC/C,mBAAmB;YAClB,MAAM;gBACL,OAAO;gBACP,aAAa;YACf;QACF,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,6BAA6B;YAC1C,MAAM,eAAe,eAAe,QAAQ,IAAI,OAAO,GAAG;YAC1D,SAAS,CAAC,4BAA4B,EAAE,cAAc;YACtD,MAAM;gBACJ,OAAO;gBACP,aAAa,CAAC,4BAA4B,EAAE,cAAc;gBAC1D,SAAS;YACX;QACH,SAAU;YACR,WAAW;QACb;IACF;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,kMAAA,CAAA,OAAI;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAEnC,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAInB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC;;0CACC,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAmB;;;;;;0CAClC,8OAAC,oIAAA,CAAA,WAAQ;gCACP,IAAG;gCACH,aAAY;gCACZ,OAAO;gCACP,UAAU,CAAC,IAAM,aAAa,EAAE,MAAM,CAAC,KAAK;gCAC5C,MAAM;gCACN,WAAU;gCACV,UAAU;;;;;;;;;;;;oBAIb,uBACG,8OAAC,iIAAA,CAAA,QAAK;wBAAC,SAAQ;;0CACb,8OAAC,wNAAA,CAAA,gBAAa;gCAAC,WAAU;;;;;;0CACzB,8OAAC,iIAAA,CAAA,aAAU;0CAAC;;;;;;0CACZ,8OAAC,iIAAA,CAAA,mBAAgB;0CAAE;;;;;;;;;;;;;;;;;;0BAK3B,8OAAC,gIAAA,CAAA,aAAU;0BACT,cAAA,8OAAC,kIAAA,CAAA,SAAM;oBAAC,SAAS;oBAAuB,UAAU;oBAAS,WAAU;8BAClE,UACC,wCAEA;;0CACE,8OAAC,+MAAA,CAAA,QAAK;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;;;;;;;;;;;;;AAOhD","debugId":null}},
    {"offset": {"line": 2949, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/ui/badge.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n"],"names":[],"mappings":";;;;;AACA;AAEA;;;;AAEA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB,0KACA;IACE,UAAU;QACR,SAAS;YACP,SACE;YACF,WACE;YACF,aACE;YACF,SAAS;QACX;IACF;IACA,iBAAiB;QACf,SAAS;IACX;AACF;AAOF,SAAS,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,OAAmB;IACzD,qBACE,8OAAC;QAAI,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,cAAc;YAAE;QAAQ,IAAI;QAAa,GAAG,KAAK;;;;;;AAExE","debugId":null}},
    {"offset": {"line": 2991, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/user-persona-display.tsx"],"sourcesContent":["\n'use client';\n\nimport type { GenerateInvestmentPersonaOutput } from '@/ai/flows/generate-investment-persona';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { UserCheck, Target, BarChart, Clock, DollarSign, Activity } from 'lucide-react';\n\ninterface UserPersonaDisplayProps {\n  persona: GenerateInvestmentPersonaOutput | null;\n}\n\nexport function UserPersonaDisplay({ persona }: UserPersonaDisplayProps) {\n  if (!persona) {\n    return null; // Don't render anything if no persona is generated\n  }\n\n  return (\n    <Card className=\"shadow-lg rounded-lg bg-card border-primary/50\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n          <UserCheck className=\"mr-2 h-5 w-5\" /> Generated Investment Persona\n        </CardTitle>\n        <CardDescription>Based on your input, here's your AI-generated profile.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-3 text-sm\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-muted-foreground flex items-center\"><Target className=\"mr-1.5 h-4 w-4\" /> Investment Goals:</span>\n          <Badge variant=\"secondary\">{persona.investmentGoals}</Badge>\n        </div>\n         <div className=\"flex items-center justify-between\">\n          <span className=\"text-muted-foreground flex items-center\"><BarChart className=\"mr-1.5 h-4 w-4\" /> Risk Appetite:</span>\n          <Badge variant=\"secondary\">{persona.riskAppetite}</Badge>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-muted-foreground flex items-center\"><Clock className=\"mr-1.5 h-4 w-4\" /> Time Horizon:</span>\n          <Badge variant=\"secondary\">{persona.timeHorizon}</Badge>\n        </div>\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-muted-foreground flex items-center\"><DollarSign className=\"mr-1.5 h-4 w-4\" /> Investment Amount:</span>\n           <Badge variant=\"secondary\">{persona.investmentAmount}</Badge>\n        </div>\n         <div className=\"flex items-center justify-between\">\n          <span className=\"text-muted-foreground flex items-center\"><Activity className=\"mr-1.5 h-4 w-4\" /> Investment Style:</span>\n          <Badge variant=\"secondary\">{persona.investmentStyle}</Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;;;;;AAWO,SAAS,mBAAmB,EAAE,OAAO,EAA2B;IACrE,IAAI,CAAC,SAAS;QACZ,OAAO,MAAM,mDAAmD;IAClE;IAEA,qBACE,8OAAC,gIAAA,CAAA,OAAI;QAAC,WAAU;;0BACd,8OAAC,gIAAA,CAAA,aAAU;;kCACT,8OAAC,gIAAA,CAAA,YAAS;wBAAC,WAAU;;0CACnB,8OAAC,gNAAA,CAAA,YAAS;gCAAC,WAAU;;;;;;4BAAiB;;;;;;;kCAExC,8OAAC,gIAAA,CAAA,kBAAe;kCAAC;;;;;;;;;;;;0BAEnB,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACrB,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;;kDAA0C,8OAAC,sMAAA,CAAA,SAAM;wCAAC,WAAU;;;;;;oCAAmB;;;;;;;0CAC/F,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAa,QAAQ,eAAe;;;;;;;;;;;;kCAEpD,8OAAC;wBAAI,WAAU;;0CACd,8OAAC;gCAAK,WAAU;;kDAA0C,8OAAC,6OAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;oCAAmB;;;;;;;0CACjG,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAa,QAAQ,YAAY;;;;;;;;;;;;kCAElD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;;kDAA0C,8OAAC,oMAAA,CAAA,QAAK;wCAAC,WAAU;;;;;;oCAAmB;;;;;;;0CAC9F,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAa,QAAQ,WAAW;;;;;;;;;;;;kCAEjD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;;kDAA0C,8OAAC,kNAAA,CAAA,aAAU;wCAAC,WAAU;;;;;;oCAAmB;;;;;;;0CAClG,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAa,QAAQ,gBAAgB;;;;;;;;;;;;kCAEtD,8OAAC;wBAAI,WAAU;;0CACd,8OAAC;gCAAK,WAAU;;kDAA0C,8OAAC,0MAAA,CAAA,WAAQ;wCAAC,WAAU;;;;;;oCAAmB;;;;;;;0CACjG,8OAAC,iIAAA,CAAA,QAAK;gCAAC,SAAQ;0CAAa,QAAQ,eAAe;;;;;;;;;;;;;;;;;;;;;;;;AAK7D","debugId":null}},
    {"offset": {"line": 3239, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/news-display.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport type { NewsHeadline } from '@/services/stock-data';\nimport { getNewsHeadlines } from '@/services/stock-data'; // This now uses NewsAPI\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { ExternalLink, Newspaper, AlertTriangle } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns'; // For relative time formatting\n\ninterface NewsDisplayProps {\n  symbol: string;\n}\n\nexport function NewsDisplay({ symbol }: NewsDisplayProps) {\n  const [headlines, setHeadlines] = useState<NewsHeadline[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true; // Prevent state update on unmounted component\n\n    async function fetchNews() {\n      if (!symbol) {\n        setHeadlines([]);\n        setLoading(false);\n        setError(null);\n        return;\n      }\n\n      setLoading(true);\n      setError(null);\n      setHeadlines([]); // Clear previous headlines\n\n      try {\n        // Call the updated function which now hits NewsAPI.org\n        const news = await getNewsHeadlines(symbol);\n         if (isMounted) {\n            // Check if the error is due to missing API key\n             if (news.length === 0 && process.env.NEXT_PUBLIC_NEWSAPI_DISABLED) {\n                 setError(\"NewsAPI key not configured. News display is disabled.\");\n             } else {\n                setHeadlines(news);\n             }\n         }\n      } catch (err: any) {\n         if (isMounted) {\n           console.error(`Error fetching news for ${symbol}:`, err.message);\n           // Display specific errors like invalid key or rate limit\n           if (err.message.includes('Invalid or missing NewsAPI key')) {\n               setError('News feed disabled: Invalid or missing NewsAPI key.');\n           } else if (err.message.includes('NewsAPI rate limit exceeded')) {\n                setError('News feed temporarily unavailable (rate limit).');\n           } else {\n               setError(err.message || 'Failed to fetch news headlines.');\n           }\n         }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    }\n\n    fetchNews();\n\n     // Cleanup function\n     return () => {\n       isMounted = false;\n     };\n\n  }, [symbol]);\n\n  const renderLoadingState = () => (\n    <div className=\"space-y-3\">\n      {[...Array(4)].map((_, i) => (\n        <div key={i} className=\"p-3 border rounded-md space-y-2\">\n          <Skeleton className=\"h-4 w-3/4\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n          <Skeleton className=\"h-3 w-1/4 ml-auto\" />\n        </div>\n      ))}\n    </div>\n  );\n\n  const renderErrorState = () => (\n     <div className=\"flex flex-col items-center justify-center text-center text-destructive p-4 border border-destructive/50 rounded-md h-full\">\n        <AlertTriangle className=\"h-8 w-8 mb-2\" />\n        <p className=\"font-semibold\">Error Loading News</p>\n        <p className=\"text-sm\">{error}</p>\n    </div>\n  );\n\n  const renderEmptyState = () => (\n     <div className=\"flex flex-col items-center justify-center text-center text-muted-foreground p-4 border rounded-md h-full\">\n        <Newspaper className=\"h-8 w-8 mb-2\" />\n        <p className=\"font-semibold\">No Recent News</p>\n        <p className=\"text-sm\">Could not find recent headlines for {symbol}.</p>\n    </div>\n  );\n\n  const renderContent = () => {\n     if (loading) return renderLoadingState();\n     if (error) return renderErrorState(); // Show error state if API key missing or other errors occur\n     if (!headlines || headlines.length === 0) return renderEmptyState();\n\n     return (\n        <ScrollArea className=\"h-[300px] w-full pr-4\"> {/* Ensure ScrollArea has a defined height */}\n            <div className=\"space-y-3\">\n            {headlines.map((headline, index) => (\n                <div key={index} className=\"p-3 border rounded-md hover:bg-secondary/50 transition-colors\">\n                <a\n                    href={headline.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-sm font-medium text-primary hover:underline block mb-1\"\n                     title={headline.title} // Add title attribute for full text hover\n                >\n                    {headline.title}\n                     <ExternalLink className=\"inline-block h-3 w-3 ml-1 opacity-70\" />\n                </a>\n                 <div className=\"flex justify-between items-center text-xs text-muted-foreground\">\n                    <span className=\"truncate max-w-[100px]\" title={headline.source}>{headline.source}</span>\n                    <span>{formatDistanceToNow(new Date(headline.publishedAt), { addSuffix: true })}</span>\n                 </div>\n                </div>\n            ))}\n            </div>\n        </ScrollArea>\n     );\n  };\n\n  return (\n    <Card className=\"shadow-lg rounded-lg h-full flex flex-col\"> {/* Ensure card takes full height */}\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n          <Newspaper className=\"mr-2 h-5 w-5\" /> Latest News for {symbol || 'N/A'}\n        </CardTitle>\n        <CardDescription>Recent headlines related to the selected stock.</CardDescription>\n      </CardHeader>\n      <CardContent className=\"flex-grow overflow-hidden\"> {/* Allow content to grow and hide overflow */}\n        {renderContent()}\n      </CardContent>\n       {/* Optional Footer */}\n        <CardFooter className=\"pt-4 border-t\">\n            <p className=\"text-xs text-muted-foreground\">News provided by NewsAPI.org</p> {/* Updated source */}\n        </CardFooter>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3579, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/components/agent-decision-log.tsx"],"sourcesContent":["\n'use client';\n\nimport type { LoggedTradeDecision } from '@/app/page'; // Import the extended type\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Badge } from '@/components/ui/badge';\nimport { Bot, TrendingUp, TrendingDown, Minus, Info, Clock } from 'lucide-react';\nimport { formatDistanceToNow } from 'date-fns'; // For relative timestamps\nimport { cn } from '@/lib/utils';\n\ninterface AgentDecisionLogProps {\n  decisions: LoggedTradeDecision[];\n}\n\nexport function AgentDecisionLog({ decisions }: AgentDecisionLogProps) {\n\n  const getActionIcon = (action: string | undefined) => {\n    const lowerAction = action?.toLowerCase();\n    switch (lowerAction) {\n      case 'buy':\n        return <TrendingUp className=\"h-4 w-4 text-success mr-2 flex-shrink-0\" />;\n      case 'sell':\n        return <TrendingDown className=\"h-4 w-4 text-destructive mr-2 flex-shrink-0\" />;\n      case 'hold':\n        return <Minus className=\"h-4 w-4 text-muted-foreground mr-2 flex-shrink-0\" />;\n      case 'info': // For strategy adjustments or other info\n         return <Info className=\"h-4 w-4 text-blue-500 mr-2 flex-shrink-0\" />;\n      default:\n        return <Bot className=\"h-4 w-4 text-primary mr-2 flex-shrink-0\" />; // Default icon\n    }\n  };\n\n  const getActionColorClass = (action: string | undefined): string => {\n      const lowerAction = action?.toLowerCase();\n      if (lowerAction === 'buy') return 'text-success';\n      if (lowerAction === 'sell') return 'text-destructive';\n      if (lowerAction === 'info') return 'text-blue-500';\n      return 'text-foreground'; // Default for hold/other\n  };\n\n  const getConfidenceColorClass = (score: number | undefined): string => {\n     if (score === undefined || score === null) return 'text-muted-foreground';\n     if (score >= 0.75) return 'text-success';\n     if (score >= 0.5) return 'text-yellow-600'; // Consider adding a warning color\n     return 'text-destructive';\n  };\n\n  return (\n    <Card className=\"shadow-lg rounded-lg\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-xl font-semibold text-primary\">\n          <Bot className=\"mr-2 h-5 w-5\" /> Agent Decision Log\n        </CardTitle>\n        <CardDescription>History of decisions made by the trading agent.</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <ScrollArea className=\"h-[300px] w-full pr-4\">\n          {decisions.length === 0 ? (\n            <div className=\"flex flex-col items-center justify-center h-full text-muted-foreground\">\n              <Clock className=\"h-8 w-8 mb-2\" />\n              <p>No agent decisions recorded yet.</p>\n              <p className=\"text-sm\">Run the agent to see its actions here.</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {decisions.slice().reverse().map((decision, index) => ( // Reverse to show newest first\n                <div key={index} className=\"p-3 border rounded-md bg-secondary/30 hover:bg-secondary/50 transition-colors\">\n                  <div className=\"flex items-start justify-between mb-2\">\n                     <div className=\"flex items-center\">\n                         {getActionIcon(decision.action)}\n                         <span className={cn(\"font-semibold text-base mr-2\", getActionColorClass(decision.action))}>\n                            {decision.action.toUpperCase()}\n                         </span>\n                         <Badge variant=\"outline\" className=\"mr-2\">{decision.symbol}</Badge>\n                          {decision.quantity && decision.action !== 'hold' && (\n                             <span className=\"text-sm text-muted-foreground\">({decision.quantity} shares)</span>\n                          )}\n                     </div>\n                     <span className=\"text-xs text-muted-foreground whitespace-nowrap\" title={decision.timestamp.toLocaleString()}>\n                        {formatDistanceToNow(decision.timestamp, { addSuffix: true })}\n                    </span>\n                  </div>\n                   <p className=\"text-sm text-muted-foreground mb-1\">{decision.reasoning}</p>\n                   {decision.confidenceScore !== undefined && decision.action !== 'info' && (\n                     <div className=\"text-xs text-right\">\n                        Confidence: <span className={cn(\"font-medium\", getConfidenceColorClass(decision.confidenceScore))}>{(decision.confidenceScore * 100).toFixed(0)}%</span>\n                     </div>\n                   )}\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </CardContent>\n    </Card>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 3856, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/config/stocks.ts"],"sourcesContent":["\n/**\n * @fileOverview Defines the list of stock symbols used throughout the application.\n */\n\n// List of 20 stock symbols (Example: Mix of tech, finance, consumer goods etc.)\nexport const STOCK_SYMBOLS: string[] = [\n    'AAPL', // Apple Inc.\n    'MSFT', // Microsoft Corp.\n    'GOOG', // Alphabet Inc. (Class C)\n    'AMZN', // Amazon.com, Inc.\n    'NVDA', // NVIDIA Corporation\n    'TSLA', // Tesla, Inc.\n    'META', // Meta Platforms, Inc.\n    'JPM',  // JPMorgan Chase & Co.\n    'V',    // Visa Inc.\n    'JNJ',  // Johnson & Johnson\n    'WMT',  // Walmart Inc.\n    'PG',   // Procter & Gamble Co.\n    'UNH',  // UnitedHealth Group Inc.\n    'MA',   // Mastercard Incorporated\n    'HD',   // The Home Depot, Inc.\n    'BAC',  // Bank of America Corp.\n    'DIS',  // The Walt Disney Company\n    'PFE',  // Pfizer Inc.\n    'NFLX', // Netflix, Inc.\n    'KO',   // The Coca-Cola Company\n];\n"],"names":[],"mappings":"AACA;;CAEC,GAED,gFAAgF;;;;AACzE,MAAM,gBAA0B;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACH","debugId":null}},
    {"offset": {"line": 3890, "column": 0}, "map": {"version":3,"sources":["file:///Users/prashanthvenkatesh/Documents/GitHub/uw-fin-agent/src/app/page.tsx"],"sourcesContent":["\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport type { PortfolioItem } from '@/types';\nimport type { GenerateInvestmentPersonaOutput } from '@/ai/flows/generate-investment-persona';\nimport type { AgentTraderInput, AgentTraderOutput, TradeDecisionSchema } from '@/ai/flows/agent-trader'; // Import agent types\nimport { runAgentTrader } from '@/ai/flows/agent-trader'; // Import agent runner\nimport { Header } from '@/components/header';\nimport { VirtualBalance } from '@/components/virtual-balance';\nimport { StockDataDisplay } from '@/components/stock-data-display';\nimport { StockRecommendation } from '@/components/stock-recommendation';\nimport { PortfolioTracker } from '@/components/portfolio-tracker';\nimport { TradeSimulator } from '@/components/trade-simulator';\nimport { UserPersonaInput } from '@/components/user-persona-input';\nimport { UserPersonaDisplay } from '@/components/user-persona-display';\nimport { NewsDisplay } from '@/components/news-display'; // Import News Component\nimport { AgentDecisionLog } from '@/components/agent-decision-log'; // Import Agent Decision Log component\nimport { Button } from '@/components/ui/button';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\" // Import Select\nimport { Bot, AlertTriangle } from 'lucide-react';\nimport { getStockData, getMultipleStockData } from '@/services/stock-data'; // Use real API functions\nimport { useToast } from '@/hooks/use-toast';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { STOCK_SYMBOLS } from '@/config/stocks'; // Import predefined stock list\n\n\n// Initial state values\nconst INITIAL_BALANCE = 100000; // Start with $100,000 virtual currency\nconst INITIAL_PORTFOLIO: PortfolioItem[] = [\n    // Example initial holding - Prices will be updated on load\n     { symbol: 'MSFT', companyName: 'Microsoft Corp.', quantity: 10, purchasePrice: 400.00, currentPrice: 400.00 }, // Placeholder price\n     { symbol: 'AAPL', companyName: 'Apple Inc.', quantity: 15, purchasePrice: 165.00, currentPrice: 165.00 }, // Placeholder price\n];\n\n// Symbols the agent will monitor (can be different from the sidebar list)\nconst MONITORED_SYMBOLS = ['AAPL', 'GOOG', 'MSFT', 'TSLA', 'AMZN']; // Example list\n\n// Interface for logged agent decisions with timestamp\nexport interface LoggedTradeDecision extends TradeDecisionSchema {\n    timestamp: Date;\n}\n\n\nexport default function Home() {\n  const [selectedSymbol, setSelectedSymbol] = useState<string>(STOCK_SYMBOLS[0]); // Default to first symbol in list\n  const [virtualBalance, setVirtualBalance] = useState<number>(INITIAL_BALANCE);\n  const [portfolio, setPortfolio] = useState<PortfolioItem[]>(INITIAL_PORTFOLIO);\n  const [currentStockData, setCurrentStockData] = useState<any>(null); // For TradeSimulator and detail view (uses getStockData)\n  const [userPersona, setUserPersona] = useState<GenerateInvestmentPersonaOutput | null>(null); // State for persona\n  const [agentIsRunning, setAgentIsRunning] = useState(false);\n  const [agentError, setAgentError] = useState<string | null>(null);\n  const [agentDecisionsLog, setAgentDecisionsLog] = useState<LoggedTradeDecision[]>([]); // State for agent decisions log\n  const { toast } = useToast();\n\n\n  // --- Data Fetching and Portfolio Update ---\n\n  // Fetch data for the currently selected symbol (for display)\n  const fetchDisplayData = useCallback(async () => {\n    if (!selectedSymbol) return;\n    try {\n      // Use the real getStockData function\n      const data = await getStockData(selectedSymbol);\n      setCurrentStockData(data); // Update data for TradeSimulator/display\n    } catch (error: any) {\n      console.error(`Failed to fetch stock data for ${selectedSymbol}:`, error.message);\n       setCurrentStockData(null); // Clear data on error\n       toast({\n         title: \"Error\",\n         description: `Could not fetch data for ${selectedSymbol}: ${error.message}`,\n         variant: \"destructive\",\n       });\n    }\n  }, [selectedSymbol, toast]);\n\n  // Update prices for all items in the portfolio using getMultipleStockData\n   const updatePortfolioPrices = useCallback(async () => {\n    const symbolsToUpdate = portfolio.map(item => item.symbol);\n    if (symbolsToUpdate.length === 0) return;\n\n    try {\n        // Fetch data for multiple symbols at once\n        const fetchedData = await getMultipleStockData(symbolsToUpdate);\n\n        if (fetchedData.length === 0 && symbolsToUpdate.length > 0) {\n            console.warn('Portfolio price update returned no data.');\n            return;\n        }\n\n        // Create a map for quick lookup\n        const priceMap = new Map(fetchedData.map(data => [data.symbol, data.price]));\n\n        // Update portfolio state using functional update for safety\n        setPortfolio(prevPortfolio => {\n            let hasChanged = false;\n            const updatedPortfolio = prevPortfolio.map(item => {\n                const newPrice = priceMap.get(item.symbol);\n                if (newPrice !== undefined && newPrice !== item.currentPrice) {\n                    hasChanged = true;\n                    return { ...item, currentPrice: newPrice };\n                }\n                return item; // Return unchanged item if no new price or price hasn't changed\n            });\n\n            // Only update state if any price actually changed\n            return hasChanged ? updatedPortfolio : prevPortfolio;\n        });\n\n    } catch (error: any) {\n         console.error(`Failed to update portfolio prices:`, error.message);\n         // Show a more generic error toast for portfolio update failure\n         toast({\n             title: \"Portfolio Update Error\",\n             description: \"Could not refresh all portfolio prices. Some values may be outdated.\",\n             variant: \"destructive\",\n         });\n    }\n\n   }, [portfolio, toast]); // Dependency on portfolio state\n\n  // Initial fetch and periodic updates\n  useEffect(() => {\n    fetchDisplayData(); // Fetch data for the initially selected symbol\n    updatePortfolioPrices(); // Update prices for existing portfolio items\n\n    // Set up intervals for pseudo-real-time updates\n    const displayDataInterval = setInterval(fetchDisplayData, 15000); // Refresh display data every 15s\n    const portfolioPriceInterval = setInterval(updatePortfolioPrices, 30000); // Refresh portfolio prices every 30s\n\n    return () => {\n      clearInterval(displayDataInterval);\n      clearInterval(portfolioPriceInterval);\n    };\n  }, [selectedSymbol, fetchDisplayData, updatePortfolioPrices]); // Ensure dependencies are correct\n\n  // Handler for selecting a stock from the dropdown\n  const handleSelectStock = (symbol: string) => {\n    if (symbol) {\n      setSelectedSymbol(symbol);\n      setCurrentStockData(null); // Clear old data while new data loads\n    }\n  };\n\n  // --- Manual Trade ---\n\n const handleManualTrade = (tradeSymbol: string, quantity: number, price: number, type: 'buy' | 'sell'): boolean => {\n    const tradeValue = quantity * price;\n\n     // Find the most up-to-date company name\n     const currentDisplayData = currentStockData?.symbol === tradeSymbol ? currentStockData : null;\n     const portfolioItem = portfolio.find(p => p.symbol === tradeSymbol);\n     const companyName = currentDisplayData?.companyName || portfolioItem?.companyName || `${tradeSymbol} Company`; // Fallback\n\n\n    if (type === 'buy') {\n      if (tradeValue > virtualBalance) {\n          toast({ title: \"Trade Failed\", description: \"Insufficient balance.\", variant: \"destructive\" });\n          return false; // Indicate failure\n      }\n      // Use functional update for balance\n      setVirtualBalance(prevBalance => prevBalance - tradeValue);\n      setPortfolio(prevPortfolio => {\n        const existingItemIndex = prevPortfolio.findIndex(item => item.symbol === tradeSymbol);\n        let updatedPortfolio = [...prevPortfolio]; // Create a copy\n\n        if (existingItemIndex > -1) {\n          const existingItem = updatedPortfolio[existingItemIndex];\n          const totalQuantity = existingItem.quantity + quantity;\n          const totalCost = existingItem.purchasePrice * existingItem.quantity + tradeValue;\n          updatedPortfolio[existingItemIndex] = {\n            ...existingItem,\n            quantity: totalQuantity,\n            purchasePrice: totalCost / totalQuantity, // Recalculate average cost\n            currentPrice: price, // Update current price to trade price\n             companyName: companyName, // Ensure name is updated if it was missing\n          };\n        } else {\n          updatedPortfolio = [ // Assign the new array\n            ...updatedPortfolio,\n            {\n              symbol: tradeSymbol,\n              companyName: companyName,\n              quantity: quantity,\n              purchasePrice: price,\n              currentPrice: price,\n            },\n          ];\n        }\n         return updatedPortfolio; // Return the new state\n      });\n        return true; // Indicate success\n    } else { // Sell\n         const existingHolding = portfolio.find(item => item.symbol === tradeSymbol);\n         if (!existingHolding || existingHolding.quantity < quantity) {\n             toast({ title: \"Trade Failed\", description: `Not enough ${tradeSymbol} shares to sell. You own ${existingHolding?.quantity || 0}.`, variant: \"destructive\" });\n             return false; // Indicate failure\n         }\n      // Use functional update for balance\n      setVirtualBalance(prevBalance => prevBalance + tradeValue);\n      setPortfolio(prevPortfolio => {\n        const existingItemIndex = prevPortfolio.findIndex(item => item.symbol === tradeSymbol);\n        let updatedPortfolio = [...prevPortfolio]; // Create a copy\n\n        // Validation already done, existingItemIndex will be > -1\n        const existingItem = updatedPortfolio[existingItemIndex];\n        if (existingItem.quantity === quantity) {\n          // Remove item if selling all shares\n          updatedPortfolio.splice(existingItemIndex, 1);\n        } else {\n          // Update quantity if selling partial shares\n          updatedPortfolio[existingItemIndex] = {\n            ...existingItem,\n            quantity: existingItem.quantity - quantity,\n            currentPrice: price, // Update current price to trade price\n          };\n        }\n         return updatedPortfolio; // Return the new state\n      });\n        return true; // Indicate success\n    }\n  };\n\n\n  // --- Agent Trading ---\n\n const executeAgentTrade = async (decision: z.infer<typeof TradeDecisionSchema>) => {\n      let tradeSuccess = false;\n      if (decision.action === 'buy' && decision.quantity && decision.symbol && decision.quantity > 0) {\n         try {\n            // Fetch latest price right before potential trade for accuracy\n            const latestData = await getStockData(decision.symbol);\n            tradeSuccess = handleManualTrade(decision.symbol, decision.quantity, latestData.price, 'buy');\n             if(!tradeSuccess) {\n                 // handleManualTrade already shows a toast on failure (e.g., insufficient balance)\n                 // Optionally add a log or different indicator for agent-specific failures\n                 console.warn(`Agent BUY action for ${decision.symbol} failed execution (e.g., insufficient balance).`);\n                 toast({ title: `Agent Action Failed: BUY ${decision.symbol}`, description: `Could not execute buy order. See logs for details.`, variant: \"destructive\" });\n             }\n         } catch (e: any) {\n              console.error(`Agent BUY ${decision.symbol}: Error fetching price or executing trade:`, e);\n              toast({ title: `Agent Trade Error (BUY ${decision.symbol})`, description: `Error executing buy: ${e.message}`, variant: \"destructive\" });\n         }\n\n      } else if (decision.action === 'sell' && decision.quantity && decision.symbol && decision.quantity > 0) {\n         const stockToSell = portfolio.find(p => p.symbol === decision.symbol);\n         if (!stockToSell) {\n             console.warn(`Agent SELL ${decision.symbol}: Stock not in portfolio. Skipping trade.`);\n             // Maybe add a toast here if needed, but log might be sufficient\n             // toast({ title: `Agent Trade Skipped (${decision.symbol})`, description: `Stock not found in portfolio. Reason: ${decision.reasoning}`, variant: \"destructive\" });\n             return; // Skip if not holding\n         }\n\n         // Adjust quantity if agent tries to sell more than owned\n         const sellQuantity = Math.min(decision.quantity, stockToSell.quantity);\n         if (sellQuantity < decision.quantity) {\n            // Log adjustment, toast optional\n            console.warn(`Agent SELL ${decision.symbol}: Adjusted quantity from ${decision.quantity} to ${sellQuantity} (available shares).`);\n            // toast({ title: `Agent Sell Adjusted (${decision.symbol})`, description: `Attempted to sell ${decision.quantity}, selling available ${sellQuantity} shares instead.`, variant: \"default\" });\n         }\n\n         // Use the most recent price for selling (from portfolio state, which should be frequently updated)\n         tradeSuccess = handleManualTrade(decision.symbol, sellQuantity, stockToSell.currentPrice, 'sell');\n          if(!tradeSuccess) {\n              // handleManualTrade already shows a toast on failure\n              console.warn(`Agent SELL action for ${decision.symbol} failed execution.`);\n              toast({ title: `Agent Action Failed: SELL ${decision.symbol}`, description: `Could not execute sell order. See logs for details.`, variant: \"destructive\" });\n          }\n      }\n      // No specific action needed for 'hold' or corrected invalid quantity (0)\n      // These are logged in the decision log component.\n  };\n\n\n const handleRunAgent = async () => {\n    if (!userPersona) {\n      toast({\n        title: \"Cannot Run Agent\",\n        description: \"Please generate an investment persona first.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setAgentIsRunning(true);\n    setAgentError(null);\n    setAgentDecisionsLog([]); // Clear previous logs when running agent again\n\n    // Ensure portfolio has reasonably current prices before sending to agent\n    // The agent itself will fetch the absolute latest prices via tools\n    await updatePortfolioPrices(); // Make sure this updates the portfolio state\n\n    // Need to wait for state update before proceeding\n    await new Promise(resolve => setTimeout(resolve, 100)); // Small delay to allow state update\n\n    // Pass the latest state to the agent\n    const agentInput: AgentTraderInput = {\n      userPersona: userPersona,\n      currentPortfolio: portfolio.map(p => ({ ...p })), // Pass a fresh copy of the latest state\n      virtualBalance: virtualBalance,\n      monitoredSymbols: MONITORED_SYMBOLS,\n    };\n\n    try {\n      toast({ title: \"Agent Running\", description: \"AI is analyzing market data and news...\" });\n      console.log(\"Running agent with input:\", JSON.stringify(agentInput, null, 2));\n      const result: AgentTraderOutput = await runAgentTrader(agentInput); // Agent uses tools for real-time data\n\n      // Log decisions with timestamps\n      const decisionsWithTimestamp: LoggedTradeDecision[] = result.tradeDecisions.map(d => ({\n          ...d,\n          timestamp: new Date(),\n      }));\n      setAgentDecisionsLog(decisionsWithTimestamp); // Update the log state\n\n       if (decisionsWithTimestamp.length > 0) {\n            toast({ title: \"Agent Decisions Received\", description: `Agent made ${decisionsWithTimestamp.length} decisions. Executing trades...` });\n             // Execute trades sequentially with a small delay for simulation/UX\n             for (let i = 0; i < decisionsWithTimestamp.length; i++) {\n                  const decision = decisionsWithTimestamp[i];\n                  await new Promise(resolve => setTimeout(resolve, 500)); // Short delay between decisions\n                  await executeAgentTrade(decision); // Wait for trade execution attempt\n             }\n            toast({ title: \"Agent Finished\", description: `Agent has finished executing trades. Check the decision log.` });\n       } else {\n           toast({ title: \"Agent Completed\", description: \"No immediate trade actions recommended based on current analysis.\" });\n       }\n\n        if (result.overallStrategyAdjustment) {\n            // Optionally add strategy adjustment to the log or show a separate toast\n            setAgentDecisionsLog(prevLog => [\n                ...prevLog,\n                 {\n                    action: 'info', // Custom action type for log display\n                    symbol: 'Strategy',\n                    reasoning: result.overallStrategyAdjustment ?? '',\n                    timestamp: new Date(),\n                    quantity: undefined,\n                    confidenceScore: undefined\n                 } as unknown as LoggedTradeDecision // Type assertion needed if using custom action\n            ]);\n            toast({ title: \"Agent Strategy Suggestion\", description: result.overallStrategyAdjustment });\n        }\n\n    } catch (err) {\n      console.error(\"Error running agent trader:\", err);\n       const errorMessage = err instanceof Error ? err.message : 'An unknown error occurred.';\n      setAgentError(`Agent failed: ${errorMessage}`);\n      toast({\n        title: \"Agent Error\",\n        description: `Agent failed: ${errorMessage}`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setAgentIsRunning(false);\n    }\n  };\n\n  // --- Render ---\n\n  return (\n      <div className=\"flex flex-col min-h-screen bg-secondary\">\n        <Header />\n        <div className=\"flex flex-1\">\n           {/* Main Content Area */}\n            <main className=\"flex-grow container mx-auto p-4 md:p-6 lg:p-8 space-y-6 md:space-y-8\">\n\n              {/* Top Row: Stock Selector, Balance */}\n              <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-end mb-6\">\n                <div className=\"flex-grow w-full md:w-auto\">\n                  <Label htmlFor=\"stock-symbol-select\" className=\"text-sm font-medium mb-1 block\">Select Stock</Label>\n                  <Select value={selectedSymbol} onValueChange={handleSelectStock}>\n                    <SelectTrigger id=\"stock-symbol-select\" className=\"bg-background w-full md:w-[200px]\">\n                      <SelectValue placeholder=\"Select a stock\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {STOCK_SYMBOLS.map((symbol) => (\n                        <SelectItem key={symbol} value={symbol}>\n                          {symbol}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"w-full md:w-auto md:ml-auto\">\n                  <VirtualBalance balance={virtualBalance} />\n                </div>\n              </div>\n\n              {/* Middle Row: Persona Input/Display and Agent Control */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 md:gap-8\">\n                <UserPersonaInput onPersonaGenerated={setUserPersona} />\n                <div className=\"space-y-4\">\n                    <UserPersonaDisplay persona={userPersona} />\n                    {/* Update Run Agent Button variant to 'accent' */}\n                    <Button\n                      onClick={handleRunAgent}\n                      disabled={agentIsRunning || !userPersona}\n                      variant=\"accent\" // Use accent variant (gold)\n                      className=\"w-full\" // Remove explicit colors, rely on variant\n                    >\n                      {agentIsRunning ? (\n                          'Agent Running...'\n                      ) : (\n                          <>\n                              <Bot className=\"mr-2 h-4 w-4\" /> Run Trading Agent (Simulated)\n                          </>\n                      )}\n                      </Button>\n                      {agentError && (\n                          <Alert variant=\"destructive\">\n                          <AlertTriangle className=\"h-4 w-4\" />\n                          <AlertTitle>Agent Error</AlertTitle>\n                          <AlertDescription>{agentError}</AlertDescription>\n                          </Alert>\n                      )}\n                </div>\n              </div>\n\n              {/* Agent Decision Log - Display below agent controls */}\n              <div className=\"mt-8\">\n                  <AgentDecisionLog decisions={agentDecisionsLog} />\n              </div>\n\n\n              {/* Bottom Row: Stock Details, News, Manual Trade, Recommendation */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 md:gap-8 mt-8\"> {/* Added mt-8 */}\n                <div className=\"lg:col-span-1 space-y-6 md:space-y-8\">\n                  {/* Stock Data Display for the selected symbol */}\n                  <StockDataDisplay symbol={selectedSymbol} />\n                </div>\n                 <div className=\"lg:col-span-1 space-y-6 md:space-y-8\">\n                    {/* News Display for the selected symbol */}\n                   <NewsDisplay symbol={selectedSymbol} />\n                 </div>\n                <div className=\"lg:col-span-1 space-y-6 md:space-y-8\">\n                  {/* Trade Simulator for the selected symbol */}\n                  <TradeSimulator\n                      stockData={currentStockData} // Pass the fetched data for the selected symbol\n                      portfolio={portfolio}\n                      virtualBalance={virtualBalance}\n                      onTrade={handleManualTrade} // Use manual trade handler\n                  />\n                   {/* Recommendation for the selected symbol */}\n                   <StockRecommendation symbol={selectedSymbol} userPersona={userPersona}/>\n                </div>\n              </div>\n\n              {/* Portfolio Tracker - Full Width Below */}\n              <div className=\"mt-8\">\n                <PortfolioTracker portfolio={portfolio} virtualBalance={virtualBalance} />\n              </div>\n            </main>\n        </div>\n      </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}